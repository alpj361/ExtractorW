// ===================================================================
// TEST USER DATA TOOLS - MCP
// Script de prueba para herramientas de datos del usuario
// ===================================================================

require('dotenv').config();
const mcpService = require('./server/services/mcp');
const { getUserProjects, getUserCodex, getUserStats, searchUserCodex } = require('./server/services/supabaseData');

// Mock de usuario para pruebas
const testUser = {
  id: 'c8a00e51-0123-4567-8901-123456789abc', // ID de prueba
  email: 'test@example.com',
  full_name: 'Usuario de Prueba'
};

async function runTests() {
  console.log('üß™ INICIANDO PRUEBAS DE HERRAMIENTAS MCP PARA DATOS DEL USUARIO');
  console.log('=' .repeat(70));

  try {
    // 1. Prueba listar herramientas MCP
    console.log('\nüìã 1. LISTANDO HERRAMIENTAS MCP DISPONIBLES...');
    const tools = await mcpService.listAvailableTools();
    console.log(`‚úÖ ${tools.length} herramientas disponibles:`);
    tools.forEach(tool => {
      console.log(`   ‚Ä¢ ${tool.name}: ${tool.description.substring(0, 60)}...`);
    });

    // Verificar que las nuevas herramientas est√©n disponibles
    const userProjectsTool = tools.find(t => t.name === 'user_projects');
    const userCodexTool = tools.find(t => t.name === 'user_codex');

    if (!userProjectsTool) {
      throw new Error('‚ùå Herramienta user_projects no encontrada');
    }
    if (!userCodexTool) {
      throw new Error('‚ùå Herramienta user_codex no encontrada');
    }
    console.log('‚úÖ Nuevas herramientas registradas correctamente');

    // 2. Prueba ejecutar user_projects directamente
    console.log('\nüìä 2. PROBANDO HERRAMIENTA user_projects...');
    try {
      const projectsResult = await mcpService.executeTool('user_projects', {
        limit: 5,
        status: 'active'
      }, testUser);

      console.log('‚úÖ user_projects ejecutada exitosamente');
      console.log(`   ‚Ä¢ Proyectos encontrados: ${projectsResult.total_projects}`);
      console.log(`   ‚Ä¢ Estad√≠sticas incluidas: ${projectsResult.user_stats ? 'S√≠' : 'No'}`);
      console.log(`   ‚Ä¢ Respuesta formateada: ${projectsResult.formatted_response ? 'S√≠' : 'No'}`);
      
      if (projectsResult.projects && projectsResult.projects.length > 0) {
        console.log(`   ‚Ä¢ Primer proyecto: ${projectsResult.projects[0].title}`);
      }

    } catch (error) {
      console.log(`‚ö†Ô∏è Error esperado con usuario de prueba: ${error.message}`);
      console.log('   (Esto es normal si el usuario no existe en la base de datos)');
    }

    // 3. Prueba ejecutar user_codex directamente
    console.log('\nüìö 3. PROBANDO HERRAMIENTA user_codex...');
    try {
      const codexResult = await mcpService.executeTool('user_codex', {
        limit: 5,
        query: 'an√°lisis'
      }, testUser);

      console.log('‚úÖ user_codex ejecutada exitosamente');
      console.log(`   ‚Ä¢ Items encontrados: ${codexResult.total_items}`);
      console.log(`   ‚Ä¢ B√∫squeda realizada: ${codexResult.metadata.search_performed ? 'S√≠' : 'No'}`);
      console.log(`   ‚Ä¢ Respuesta formateada: ${codexResult.formatted_response ? 'S√≠' : 'No'}`);

    } catch (error) {
      console.log(`‚ö†Ô∏è Error esperado con usuario de prueba: ${error.message}`);
      console.log('   (Esto es normal si el usuario no existe en la base de datos)');
    }

    // 4. Prueba validaci√≥n de par√°metros
    console.log('\nüîß 4. PROBANDO VALIDACI√ìN DE PAR√ÅMETROS...');
    
    // Prueba con par√°metros inv√°lidos
    try {
      await mcpService.executeTool('user_projects', {
        limit: -5  // L√≠mite inv√°lido
      }, testUser);
    } catch (error) {
      console.log('‚úÖ Validaci√≥n funcionando: l√≠mite negativo rechazado');
    }

    try {
      await mcpService.executeTool('user_codex', {
        limit: 1000  // L√≠mite excesivo
      }, testUser);
    } catch (error) {
      console.log('‚úÖ Validaci√≥n funcionando: l√≠mite excesivo rechazado');
    }

    // 5. Prueba sin usuario autenticado
    console.log('\nüîê 5. PROBANDO SEGURIDAD - SIN USUARIO AUTENTICADO...');
    try {
      await mcpService.executeTool('user_projects', {}, null);
    } catch (error) {
      if (error.message.includes('autenticado')) {
        console.log('‚úÖ Seguridad funcionando: acceso denegado sin autenticaci√≥n');
      } else {
        console.log(`‚ö†Ô∏è Error inesperado: ${error.message}`);
      }
    }

    try {
      await mcpService.executeTool('user_codex', {}, null);
    } catch (error) {
      if (error.message.includes('autenticado')) {
        console.log('‚úÖ Seguridad funcionando: acceso denegado sin autenticaci√≥n');
      } else {
        console.log(`‚ö†Ô∏è Error inesperado: ${error.message}`);
      }
    }

    // 6. Prueba informaci√≥n de herramientas
    console.log('\nüìñ 6. OBTENIENDO INFORMACI√ìN DETALLADA DE HERRAMIENTAS...');
    
    const projectsInfo = await mcpService.getToolInfo('user_projects');
    console.log('‚úÖ user_projects info obtenida:');
    console.log(`   ‚Ä¢ Categor√≠a: ${projectsInfo.category}`);
    console.log(`   ‚Ä¢ Cr√©ditos: ${projectsInfo.usage_credits}`);
    console.log(`   ‚Ä¢ Par√°metros: ${Object.keys(projectsInfo.parameters).join(', ')}`);

    const codexInfo = await mcpService.getToolInfo('user_codex');
    console.log('‚úÖ user_codex info obtenida:');
    console.log(`   ‚Ä¢ Categor√≠a: ${codexInfo.category}`);
    console.log(`   ‚Ä¢ Cr√©ditos: ${codexInfo.usage_credits}`);
    console.log(`   ‚Ä¢ Par√°metros: ${Object.keys(codexInfo.parameters).join(', ')}`);

    // 7. Prueba estado del servidor MCP
    console.log('\nüìä 7. VERIFICANDO ESTADO DEL SERVIDOR MCP...');
    const serverStatus = await mcpService.getServerStatus();
    console.log('‚úÖ Estado del servidor obtenido:');
    console.log(`   ‚Ä¢ Herramientas disponibles: ${serverStatus.available_tools}`);
    console.log(`   ‚Ä¢ Lista de herramientas: ${serverStatus.tools_list.join(', ')}`);
    console.log(`   ‚Ä¢ Estado: ${serverStatus.status}`);

    // Verificar que las nuevas herramientas est√©n en la lista
    if (serverStatus.tools_list.includes('user_projects') && 
        serverStatus.tools_list.includes('user_codex')) {
      console.log('‚úÖ Nuevas herramientas incluidas en estado del servidor');
    } else {
      console.log('‚ö†Ô∏è Nuevas herramientas no aparecen en estado del servidor');
    }

    // 8. Prueba servicios de Supabase directamente (opcional)
    console.log('\nüóÑÔ∏è 8. PROBANDO SERVICIOS DE SUPABASE DIRECTAMENTE...');
    try {
      // Solo si las variables de entorno est√°n configuradas
      if (process.env.SUPABASE_URL && process.env.SUPABASE_SERVICE_KEY) {
        console.log('‚ö†Ô∏è Probando conexi√≥n a Supabase con usuario de prueba...');
        console.log('   (Se espera error si el usuario no existe)');
        
        try {
          const stats = await getUserStats(testUser.id);
          console.log('‚úÖ Estad√≠sticas obtenidas (usuario existe):', stats);
        } catch (error) {
          console.log(`‚ö†Ô∏è Error esperado: ${error.message}`);
        }
      } else {
        console.log('‚ö†Ô∏è Variables de entorno de Supabase no configuradas, saltando prueba');
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è Error de conexi√≥n Supabase: ${error.message}`);
    }

    console.log('\n' + '='.repeat(70));
    console.log('üéâ PRUEBAS COMPLETADAS EXITOSAMENTE');
    console.log('‚úÖ Todas las herramientas de datos del usuario est√°n funcionando');
    console.log('‚úÖ Validaci√≥n de par√°metros operativa');
    console.log('‚úÖ Seguridad de autenticaci√≥n implementada');
    console.log('‚úÖ Integraci√≥n MCP completa');

    // Resumen de herramientas
    console.log('\nüìã RESUMEN DE HERRAMIENTAS DE DATOS DEL USUARIO:');
    console.log(`‚Ä¢ user_projects: ${userProjectsTool.description}`);
    console.log(`‚Ä¢ user_codex: ${userCodexTool.description}`);
    console.log('\nüöÄ El sistema est√° listo para usar en Vizta Chat');

  } catch (error) {
    console.error('\n‚ùå ERROR EN PRUEBAS:', error);
    console.error('Stack:', error.stack);
    process.exit(1);
  }
}

// Funci√≥n para pruebas con usuario real (opcional)
async function testWithRealUser(userId) {
  console.log(`\nüîÑ PROBANDO CON USUARIO REAL: ${userId}`);
  
  const realUser = {
    id: userId,
    email: 'usuario@real.com'
  };

  try {
    // Probar user_projects
    const projectsResult = await mcpService.executeTool('user_projects', { limit: 3 }, realUser);
    console.log(`‚úÖ Proyectos encontrados: ${projectsResult.total_projects}`);
    
    // Probar user_codex
    const codexResult = await mcpService.executeTool('user_codex', { limit: 3 }, realUser);
    console.log(`‚úÖ Items del Codex encontrados: ${codexResult.total_items}`);
    
  } catch (error) {
    console.log(`‚ö†Ô∏è Error con usuario real: ${error.message}`);
  }
}

// Ejecutar pruebas
if (require.main === module) {
  runTests().then(() => {
    console.log('\nüèÅ Script de prueba terminado');
    process.exit(0);
  }).catch(error => {
    console.error('‚ùå Error fatal:', error);
    process.exit(1);
  });
}

module.exports = {
  runTests,
  testWithRealUser
}; 