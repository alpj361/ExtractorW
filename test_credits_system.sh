#!/bin/bash

# Script de prueba para sistema de cr√©ditos - PulseJournal
# Uso: ./test_credits_system.sh YOUR_ADMIN_TOKEN

if [ -z "$1" ]; then
    echo "‚ùå Uso: $0 <ADMIN_TOKEN>"
    echo "Ejemplo: $0 eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    exit 1
fi

TOKEN="$1"
BASE_URL="http://localhost:8080"

echo "üöÄ INICIANDO PRUEBAS DEL SISTEMA DE CR√âDITOS"
echo "=============================================="
echo ""

# Funci√≥n para hacer requests con token
api_call() {
    local method="$1"
    local endpoint="$2"
    local data="$3"
    
    echo "üì° $method $endpoint"
    
    if [ -n "$data" ]; then
        curl -X "$method" "$BASE_URL$endpoint" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            -d "$data" \
            --silent | jq '.' 2>/dev/null || echo "‚ùå Error en respuesta"
    else
        curl -X "$method" "$BASE_URL$endpoint" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            --silent | jq '.' 2>/dev/null || echo "‚ùå Error en respuesta"
    fi
    echo ""
}

# 1. Verificar estado de cr√©ditos
echo "1Ô∏è‚É£ VERIFICANDO ESTADO DE CR√âDITOS"
echo "--------------------------------"
api_call "GET" "/api/credits/status"

# 2. Dashboard de admin
echo "2Ô∏è‚É£ DASHBOARD DE ADMINISTRACI√ìN"
echo "------------------------------"
api_call "GET" "/api/admin/dashboard"

# 3. Lista de usuarios
echo "3Ô∏è‚É£ LISTA DE USUARIOS"
echo "-------------------"
api_call "GET" "/api/admin/users?limit=5"

# 4. Agregar cr√©ditos (si hay usuarios de prueba)
echo "4Ô∏è‚É£ AGREGANDO CR√âDITOS A USUARIO DE PRUEBA"
echo "----------------------------------------"
api_call "POST" "/api/credits/add" '{
    "user_email": "usuario1@prueba.com",
    "credits_to_add": 50
}'

# 5. Probar operaci√≥n que consume cr√©ditos
echo "5Ô∏è‚É£ PROBANDO SONDEO (1 cr√©dito)"
echo "-----------------------------"
api_call "POST" "/api/sondeo" '{
    "contexto": "Prueba del sistema",
    "pregunta": "¬øC√≥mo funciona el sistema de cr√©ditos?"
}'

# 6. Probar crear documento
echo "6Ô∏è‚É£ PROBANDO CREAR DOCUMENTO (2-5 cr√©ditos)"
echo "------------------------------------------"
api_call "POST" "/api/create-document" '{
    "type": "resumen",
    "content": "Esta es una prueba del sistema de generaci√≥n de documentos con IA",
    "length": "corto"
}'

# 7. Ver historial de uso
echo "7Ô∏è‚É£ HISTORIAL DE USO"
echo "------------------"
api_call "GET" "/api/credits/history?limit=5"

# 8. Ver logs administrativos
echo "8Ô∏è‚É£ LOGS ADMINISTRATIVOS"
echo "----------------------"
api_call "GET" "/api/admin/logs?limit=5"

# 9. Usuarios con cr√©ditos bajos
echo "9Ô∏è‚É£ USUARIOS CON CR√âDITOS BAJOS"
echo "-----------------------------"
api_call "GET" "/api/admin/users?low_credits=true"

# 10. Verificar estado final
echo "üîü ESTADO FINAL DE CR√âDITOS"
echo "--------------------------"
api_call "GET" "/api/credits/status"

echo ""
echo "‚úÖ PRUEBAS COMPLETADAS"
echo "====================="
echo ""
echo "üí° Consejos:"
echo "- Revisa la tabla 'usage_logs' en Supabase para ver los registros"
echo "- Verifica que los cr√©ditos se hayan debitado correctamente"
echo "- Prueba con diferentes usuarios (admin vs user regular)"
echo ""
echo "üîó Endpoints importantes:"
echo "- Dashboard: $BASE_URL/api/admin/dashboard"
echo "- Usuarios: $BASE_URL/api/admin/users"
echo "- Logs: $BASE_URL/api/admin/logs"
echo "- Cr√©ditos: $BASE_URL/api/credits/status" 