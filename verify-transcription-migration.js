#!/usr/bin/env node

/**
 * Script para verificar que la migraci√≥n de audio_transcription est√© aplicada
 */

const supabase = require('./server/utils/supabase');

console.log('üîç VERIFICANDO MIGRACI√ìN DE AUDIO_TRANSCRIPTION');
console.log('='.repeat(50));

async function checkMigration() {
  try {
    console.log('\n1Ô∏è‚É£ Verificando conexi√≥n a Supabase...');
    
    if (!supabase) {
      throw new Error('Cliente Supabase no inicializado');
    }
    
    console.log('‚úÖ Conexi√≥n a Supabase OK');
    
    console.log('\n2Ô∏è‚É£ Verificando estructura de tabla codex_items...');
    
    // Intentar hacer una consulta que incluya la columna audio_transcription
    const { data, error } = await supabase
      .from('codex_items')
      .select('id, titulo, audio_transcription')
      .limit(1);
    
    if (error) {
      if (error.message.includes('audio_transcription')) {
        console.log('‚ùå La columna audio_transcription NO existe');
        console.log('   Error:', error.message);
        return false;
      } else {
        console.log('‚ùå Error en consulta:', error.message);
        return false;
      }
    }
    
    console.log('‚úÖ La columna audio_transcription existe');
    
    console.log('\n3Ô∏è‚É£ Verificando √≠ndice GIN para b√∫squeda...');
    
    // Verificar que podemos hacer b√∫squedas de texto
    const { data: searchData, error: searchError } = await supabase
      .from('codex_items')
      .select('id, titulo')
      .textSearch('audio_transcription', 'test', { type: 'websearch' })
      .limit(1);
    
    if (searchError) {
      console.log('‚ö†Ô∏è √çndice GIN no est√° funcionando correctamente');
      console.log('   Error:', searchError.message);
      console.log('   Esto no afecta la funcionalidad b√°sica de transcripci√≥n');
    } else {
      console.log('‚úÖ √çndice GIN para b√∫squeda funcionando');
    }
    
    console.log('\n4Ô∏è‚É£ Verificando permisos RLS...');
    
    // Intentar insertar un registro de prueba (ser√° rechazado por RLS sin usuario)
    const { data: insertData, error: insertError } = await supabase
      .from('codex_items')
      .insert([{
        user_id: '00000000-0000-0000-0000-000000000000',
        tipo: 'test',
        titulo: 'Test Transcription',
        audio_transcription: 'Esta es una prueba'
      }]);
    
    if (insertError && insertError.message.includes('RLS')) {
      console.log('‚úÖ RLS est√° funcionando correctamente');
    } else if (insertError) {
      console.log('‚ö†Ô∏è Error inesperado:', insertError.message);
    } else {
      console.log('‚ö†Ô∏è Se insert√≥ un registro de prueba (esto no deber√≠a pasar)');
    }
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Error verificando migraci√≥n:', error.message);
    return false;
  }
}

async function showMigrationInstructions() {
  console.log('\nüìã INSTRUCCIONES PARA APLICAR MIGRACI√ìN:');
  console.log('=====================================');
  console.log('1. Conectarse a la base de datos de Supabase');
  console.log('2. Ejecutar el archivo: add_audio_transcription_to_codex.sql');
  console.log('3. O ejecutar manualmente:');
  console.log('');
  console.log('   ALTER TABLE codex_items ADD COLUMN audio_transcription TEXT;');
  console.log('   CREATE INDEX IF NOT EXISTS idx_codex_items_audio_transcription');
  console.log('   ON codex_items USING gin(to_tsvector(\'spanish\', audio_transcription));');
  console.log('');
  console.log('4. Verificar con: \\d codex_items');
}

async function runCheck() {
  try {
    const isOk = await checkMigration();
    
    if (isOk) {
      console.log('\nüéâ VERIFICACI√ìN COMPLETA');
      console.log('‚úÖ La migraci√≥n est√° aplicada correctamente');
      console.log('üé¨ El sistema de transcripci√≥n deber√≠a funcionar');
    } else {
      console.log('\nüí• VERIFICACI√ìN FALLIDA');
      console.log('‚ùå La migraci√≥n NO est√° aplicada');
      await showMigrationInstructions();
    }
    
  } catch (error) {
    console.error('\nüí• ERROR FATAL:', error.message);
    await showMigrationInstructions();
    process.exit(1);
  }
}

// Ejecutar verificaci√≥n
runCheck().catch(console.error); 