/**
 * Script de prueba para verificar la integraci√≥n de User Discovery en Vizta
 */

const { AgentesService } = require('./server/services/agentesService');

// Simular usuario de prueba
const testUser = {
  id: 'test_user_123',
  email: 'test@example.com'
};

// Casos de prueba para User Discovery
const testCases = [
  // Casos que deber√≠an activar user_discovery
  'busca Mario L√≥pez',
  'quien es Ana Garc√≠a',
  'encuentra Pedro Gonz√°lez',
  'informaci√≥n sobre Karin Herrera',
  '@pedrogonzalez en twitter',
  'twitter de Sandra Torres',
  'handle de Bernardo Arevalo',
  'cuenta de Alejandro Giammattei',
  
  // Casos que NO deber√≠an activar user_discovery (control)
  'busca informaci√≥n sobre el clima',
  'hola como estas',
  'analiza sentimientos en twitter',
  'tendencias en guatemala'
];

async function testUserDiscoveryIntegration() {
  console.log('üß™ === INICIANDO PRUEBAS DE INTEGRACI√ìN USER DISCOVERY ===\n');
  
  const agentesService = new AgentesService();
  
  for (let i = 0; i < testCases.length; i++) {
    const testMessage = testCases[i];
    console.log(`\nüìù Caso ${i + 1}: "${testMessage}"`);
    console.log('‚îÄ'.repeat(60));
    
    try {
      const result = await agentesService.processUserQuery(testMessage, testUser);
      
      console.log(`‚úÖ Resultado:`);
      console.log(`   Agent: ${result.response?.agent}`);
      console.log(`   Intent: ${result.metadata?.intent}`);
      console.log(`   Mode: ${result.metadata?.mode}`);
      console.log(`   Success: ${result.response?.success !== false}`);
      
      if (result.response?.message) {
        console.log(`   Message (primeros 100 chars): ${result.response.message.substring(0, 100)}...`);
      }
      
      // Verificar si se activ√≥ user_discovery correctamente
      const expectedUserDiscovery = i < 8; // Primeros 8 casos deber√≠an activar user_discovery
      const actualUserDiscovery = result.metadata?.intent === 'user_discovery';
      
      if (expectedUserDiscovery === actualUserDiscovery) {
        console.log(`   ‚úÖ Intent clasificado correctamente: ${actualUserDiscovery ? 'user_discovery' : 'otro'}`);
      } else {
        console.log(`   ‚ùå Intent MAL clasificado. Esperado: ${expectedUserDiscovery ? 'user_discovery' : 'otro'}, Actual: ${result.metadata?.intent}`);
      }
      
    } catch (error) {
      console.log(`‚ùå Error: ${error.message}`);
    }
  }
  
  console.log('\nüèÅ === PRUEBAS COMPLETADAS ===');
}

// Verificar que las dependencias est√°n disponibles
async function checkDependencies() {
  console.log('üîç Verificando dependencias...');
  
  try {
    // Verificar OPENAI_API_KEY
    if (!process.env.OPENAI_API_KEY) {
      console.log('‚ùå OPENAI_API_KEY no configurado');
      return false;
    }
    console.log('‚úÖ OPENAI_API_KEY configurado');
    
    // Verificar LAURA_MEMORY_URL
    const lauraUrl = process.env.LAURA_MEMORY_URL || 'http://localhost:5001';
    console.log(`‚úÖ LAURA_MEMORY_URL: ${lauraUrl}`);
    
    console.log('‚úÖ Dependencias verificadas\n');
    return true;
    
  } catch (error) {
    console.log(`‚ùå Error verificando dependencias: ${error.message}`);
    return false;
  }
}

// Ejecutar pruebas
async function main() {
  const dependenciesOk = await checkDependencies();
  
  if (!dependenciesOk) {
    console.log('‚ùå Dependencias faltantes. Configura las variables de entorno necesarias.');
    process.exit(1);
  }
  
  await testUserDiscoveryIntegration();
}

// Solo ejecutar si es llamado directamente
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  testUserDiscoveryIntegration,
  checkDependencies
};