// ===================================================================
// SCRIPT DE PRUEBA PARA NORMALIZACI√ìN GEOGR√ÅFICA EN COVERAGES
// Verifica que la integraci√≥n con mapsAgent funcione correctamente
// ===================================================================

const { normalizeGeographicInfo } = require('./server/services/mapsAgent');

// Datos de prueba
const testLocations = [
  { city: 'Xeputul 2', department: null, pais: 'Guatemala' },
  { city: 'Ixquisis', department: null, pais: 'Guatemala' },
  { city: 'Quisach√©', department: null, pais: 'Guatemala' },
  { city: 'Cidabenque', department: null, pais: 'Guatemala' },
  { city: 'Chana', department: null, pais: 'Guatemala' },
  { city: 'Xela', department: null, pais: 'Guatemala' },
  { city: 'Antigua', department: null, pais: 'Guatemala' },
  { city: 'Departamento de Comisi√≥n Bancaria', department: null, pais: 'Guatemala' },
  { city: 'Guatemala', department: null, pais: 'Guatemala' },
  { city: 'Cob√°n', department: null, pais: 'Guatemala' }
];

console.log('üß™ PRUEBA DE NORMALIZACI√ìN GEOGR√ÅFICA EN COVERAGES');
console.log('='.repeat(60));

async function testNormalization() {
  for (let i = 0; i < testLocations.length; i++) {
    const location = testLocations[i];
    
    console.log(`\n${i + 1}. Probando: "${location.city}"`);
    console.log(`   Entrada: ${JSON.stringify(location)}`);
    
    try {
      const normalized = normalizeGeographicInfo(location);
      console.log(`   ‚úÖ Salida: ${JSON.stringify(normalized)}`);
      
      // Verificar si se detect√≥ departamento
      if (!location.department && normalized.department) {
        console.log(`   üéØ Departamento detectado: ${normalized.department}`);
      }
      
      // Verificar si es una localidad v√°lida
      if (normalized.city && normalized.department && normalized.pais) {
        console.log(`   ‚úÖ Ubicaci√≥n completa y v√°lida`);
      } else if (location.city === 'Departamento de Comisi√≥n Bancaria') {
        console.log(`   ‚ö†Ô∏è  Texto no geogr√°fico detectado correctamente`);
      } else {
        console.log(`   ‚ö†Ô∏è  Informaci√≥n incompleta`);
      }
      
    } catch (error) {
      console.log(`   ‚ùå Error: ${error.message}`);
    }
  }
  
  console.log('\n' + '='.repeat(60));
  console.log('üéâ PRUEBA COMPLETADA');
  console.log('üìã Ahora puedes probar en el frontend:');
  console.log('   1. Crear una nueva cobertura con cualquiera de estas ubicaciones');
  console.log('   2. Usar el endpoint /api/coverages/normalize-location');
  console.log('   3. Verificar que se detecten y normalicen correctamente');
}

// Ejecutar prueba
testNormalization().catch(console.error); 