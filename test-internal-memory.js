/**
 * Test de integraci√≥n interna de memoria Laura
 * Verifica que Laura pueda usar el m√≥dulo Python interno sin HTTP
 */

const { InternalMemoryClient } = require('./server/services/agents/laura/internalMemoryClient');

async function testInternalMemory() {
  console.log('üß™ Testing Internal Memory Client Integration\n');

  // 1. Inicializar cliente interno
  console.log('1Ô∏è‚É£ Inicializando cliente interno...');
  const memoryClient = new InternalMemoryClient({ enabled: true });

  try {
    // 2. Health check
    console.log('\n2Ô∏è‚É£ Verificando salud del sistema...');
    const isHealthy = await memoryClient.isHealthy();
    console.log(`   Salud del sistema: ${isHealthy ? '‚úÖ Saludable' : '‚ùå No disponible'}`);

    if (!isHealthy) {
      console.log('‚ùå El sistema no est√° saludable. Verifica que laura_memory est√© configurado.');
      return;
    }

    // 3. Guardar usuario de prueba
    console.log('\n3Ô∏è‚É£ Guardando usuario de prueba...');
    const testUser = {
      user_name: 'Usuario Test Interno',
      twitter_username: 'test_interno_2025',
      description: 'Usuario de prueba para integraci√≥n interna JavaScript-Python',
      category: 'test_interno'
    };

    const saveResult = await memoryClient.saveUserDiscovery(testUser);
    console.log(`   Guardado: ${saveResult.success ? '‚úÖ Exitoso' : '‚ùå Fall√≥'}`);
    if (!saveResult.success) {
      console.log(`   Error: ${saveResult.error}`);
    }

    // 4. Buscar usuario guardado
    console.log('\n4Ô∏è‚É£ Buscando usuario guardado...');
    const searchResults = await memoryClient.searchUserHandles('test_interno_2025', 3);
    console.log(`   Resultados encontrados: ${searchResults.length}`);
    
    if (searchResults.length > 0) {
      console.log('   ‚úÖ Usuario encontrado:');
      searchResults.forEach((result, index) => {
        console.log(`     ${index + 1}. ${result.substring(0, 100)}...`);
      });
    } else {
      console.log('   ‚ö†Ô∏è  Usuario no encontrado en b√∫squeda');
    }

    // 5. Buscar usuarios existentes
    console.log('\n5Ô∏è‚É£ Buscando usuarios existentes...');
    const existingUsers = await memoryClient.searchUserHandles('Mar√≠a L√≥pez', 2);
    console.log(`   Usuarios existentes encontrados: ${existingUsers.length}`);
    
    if (existingUsers.length > 0) {
      console.log('   ‚úÖ Usuarios encontrados:');
      existingUsers.forEach((result, index) => {
        console.log(`     ${index + 1}. ${result.substring(0, 80)}...`);
      });
    }

    // 6. Guardar informaci√≥n pol√≠tica
    console.log('\n6Ô∏è‚É£ Guardando informaci√≥n pol√≠tica...');
    const politicalInfo = 'Prueba de integraci√≥n interna: El nuevo sistema permite comunicaci√≥n directa entre JavaScript y Python sin HTTP.';
    const politicalResult = await memoryClient.saveToPolitics(politicalInfo, {
      source: 'test_interno',
      type: 'integration_test'
    });
    console.log(`   Guardado pol√≠tico: ${politicalResult.success ? '‚úÖ Exitoso' : '‚ùå Fall√≥'}`);

    // 7. Buscar informaci√≥n pol√≠tica
    console.log('\n7Ô∏è‚É£ Buscando informaci√≥n pol√≠tica...');
    const politicalSearch = await memoryClient.searchPoliticalContext('integraci√≥n interna', 2);
    console.log(`   Informaci√≥n pol√≠tica encontrada: ${politicalSearch.length} resultados`);

    if (politicalSearch.length > 0) {
      console.log('   ‚úÖ Informaci√≥n encontrada:');
      politicalSearch.forEach((result, index) => {
        console.log(`     ${index + 1}. ${result.substring(0, 80)}...`);
      });
    }

    console.log('\nüéâ ¬°Test de integraci√≥n interna completado exitosamente!');
    console.log('\nüìã Resumen:');
    console.log(`   ‚Ä¢ Sistema saludable: ${isHealthy ? '‚úÖ' : '‚ùå'}`);
    console.log(`   ‚Ä¢ Usuario guardado: ${saveResult.success ? '‚úÖ' : '‚ùå'}`);
    console.log(`   ‚Ä¢ Usuario encontrado: ${searchResults.length > 0 ? '‚úÖ' : '‚ùå'}`);
    console.log(`   ‚Ä¢ Info pol√≠tica guardada: ${politicalResult.success ? '‚úÖ' : '‚ùå'}`);
    console.log(`   ‚Ä¢ B√∫squedas funcionando: ‚úÖ`);

  } catch (error) {
    console.error('\n‚ùå Error durante el test:', error.message);
    console.error('Stack trace:', error.stack);
    
    console.log('\nüîß Troubleshooting:');
    console.log('   ‚Ä¢ Verifica que laura_memory Docker est√© ejecut√°ndose');
    console.log('   ‚Ä¢ Verifica que Python3 est√© disponible');
    console.log('   ‚Ä¢ Verifica que las dependencias est√©n instaladas');
    console.log('   ‚Ä¢ Verifica que ZEP_API_KEY est√© configurada');
  }
}

// Ejecutar test si se llama directamente
if (require.main === module) {
  testInternalMemory().then(() => {
    console.log('\n‚úÖ Test completado');
    process.exit(0);
  }).catch((error) => {
    console.error('\n‚ùå Test fall√≥:', error);
    process.exit(1);
  });
}

module.exports = { testInternalMemory }; 