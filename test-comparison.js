const scrapingGpt4Module = require('./test-gpt4-turbo'); // Web Scraping + GPT4
const perplexityModule = require('./test-perplexity'); // Perplexity batch (original)
const perplexityIndividualModule = require('./test-perplexity-individual'); // Perplexity individual (nuevo)
require('dotenv').config();

// Tendencias reales proporcionadas por el usuario - datos de hoy
const testTrends = [
  { name: 'Napoli', volume: 1000 },
  { name: 'Lilo', volume: 900 },
  { name: 'Alejandro Giammattei', volume: 800 },
  { name: 'Lukita', volume: 700 },
  { name: 'santa mar√≠a de jes√∫s', volume: 600 },
  { name: 'Aguirre', volume: 500 },
  { name: 'SerieA', volume: 400 },
  { name: 'Morat', volume: 300 },
  { name: 'McTominay', volume: 200 },
  { name: 'Margaret Satterthwaite', volume: 100 }
];

async function compareApproaches() {
  console.log('üî¨ COMPARACI√ìN DE ENFOQUES DE IA - TENDENCIAS REALES');
  console.log('='.repeat(70));
  
  // Verificar configuraci√≥n
  const hasOpenRouter = !!process.env.OPENROUTER_API_KEY;
  const hasPerplexity = !!process.env.PERPLEXITY_API_KEY;
  
  console.log(`\nüìã CONFIGURACI√ìN:`);
  console.log(`   OpenRouter API: ${hasOpenRouter ? '‚úÖ Configurada' : '‚ùå No configurada'}`);
  console.log(`   Perplexity API: ${hasPerplexity ? '‚úÖ Configurada' : '‚ùå No configurada'}`);
  
  if (!hasOpenRouter && !hasPerplexity) {
    console.error('\n‚ùå No hay APIs configuradas. Configura al menos una en el archivo .env');
    console.log('üí° Las API keys est√°n configuradas correctamente en .env');
    return;
  }
  
  console.log('\nüìä TENDENCIAS REALES DE HOY:');
  testTrends.forEach((trend, i) => {
    console.log(`  ${i+1}. ${trend.name} (${trend.volume} menciones)`);
  });
  
  const results = {};
  
  // --- PRUEBA 1: WEB SCRAPING + GPT-4 TURBO ---
  if (hasOpenRouter) {
    console.log('\n\nüï∑Ô∏è === PRUEBA 1: WEB SCRAPING + GPT-4 TURBO ===');
    console.log('='.repeat(60));
    
    try {
      const startTime = Date.now();
      const scrapingResults = await scrapingGpt4Module.processWithScrapingPlusGPT4(testTrends, 'Guatemala');
      const endTime = Date.now();
      
      results.scraping = {
        results: scrapingResults,
        timeMs: endTime - startTime,
        success: true
      };
      
      console.log(`\n‚è±Ô∏è  Tiempo total: ${(results.scraping.timeMs / 1000).toFixed(2)} segundos`);
      
    } catch (error) {
      console.error('‚ùå Error en Web Scraping + GPT-4 Turbo:', error.message);
      results.scraping = {
        results: [],
        timeMs: 0,
        success: false,
        error: error.message
      };
    }
  }
  
  // --- PRUEBA 2: PERPLEXITY INDIVIDUAL ---
  if (hasPerplexity) {
    console.log('\n\nüîç === PRUEBA 2: PERPLEXITY INDIVIDUAL ===');
    console.log('='.repeat(55));
    
    try {
      const startTime = Date.now();
      const perplexityResults = await perplexityIndividualModule.processWithPerplexityIndividual(testTrends, 'Guatemala');
      const endTime = Date.now();
      
      results.perplexity = {
        results: perplexityResults,
        timeMs: endTime - startTime,
        success: true,
        type: 'individual'
      };
      
      console.log(`\n‚è±Ô∏è  Tiempo total: ${(results.perplexity.timeMs / 1000).toFixed(2)} segundos`);
      
    } catch (error) {
      console.error('‚ùå Error en Perplexity Individual:', error.message);
      results.perplexity = {
        results: [],
        timeMs: 0,
        success: false,
        error: error.message,
        type: 'individual'
      };
    }
  }
  
  // --- COMPARACI√ìN DE RESULTADOS ---
  console.log('\n\nüìä === COMPARACI√ìN DE RESULTADOS CON TENDENCIAS REALES ===');
  console.log('='.repeat(70));
  
  // Comparar tiempos
  if (results.scraping?.success && results.perplexity?.success) {
    console.log('\n‚è±Ô∏è  RENDIMIENTO:');
    console.log(`   Scraping + GPT-4: ${(results.scraping.timeMs / 1000).toFixed(2)}s`);
    console.log(`   Perplexity Individual: ${(results.perplexity.timeMs / 1000).toFixed(2)}s`);
    
    const faster = results.scraping.timeMs < results.perplexity.timeMs ? 'Scraping + GPT-4' : 'Perplexity Individual';
    console.log(`   üèÜ M√°s r√°pido: ${faster}`);
    
    const avgTimePerTrend = {
      scraping: (results.scraping.timeMs / testTrends.length / 1000).toFixed(2),
      perplexity: (results.perplexity.timeMs / testTrends.length / 1000).toFixed(2)
    };
    console.log(`   üìä Tiempo promedio por tendencia:`);
    console.log(`      Scraping + GPT-4: ${avgTimePerTrend.scraping}s`);
    console.log(`      Perplexity: ${avgTimePerTrend.perplexity}s`);
  }
  
  // Comparar categor√≠as para tendencias espec√≠ficas
  console.log('\nüè∑Ô∏è  CATEGORIZACI√ìN DE TENDENCIAS REALES:');
  
  if (results.scraping?.success) {
    const scrapingCategories = results.scraping.results.map(r => r.category);
    console.log('\n   üìö Scraping + GPT-4:');
    testTrends.forEach((trend, i) => {
      console.log(`     ${trend.name} ‚Üí ${scrapingCategories[i] || 'N/A'}`);
    });
  }
  
  if (results.perplexity?.success) {
    const perplexityCategories = results.perplexity.results.map(r => r.category);
    console.log('\n   üîç Perplexity Individual:');
    testTrends.forEach((trend, i) => {
      console.log(`     ${trend.name} ‚Üí ${perplexityCategories[i] || 'N/A'}`);
    });
  }
  
  // An√°lisis espec√≠fico de relevancia y contexto local (solo para Perplexity Individual)
  if (results.perplexity?.success) {
    console.log('\nüéØ AN√ÅLISIS DE RELEVANCIA (Perplexity Individual):');
    results.perplexity.results.forEach((trend, i) => {
      const relevancia = trend.about?.relevancia || 'N/A';
      const contextoLocal = trend.about?.contexto_local ? 'S√≠' : 'No';
      console.log(`     ${trend.name}: Relevancia=${relevancia}, Local=${contextoLocal}`);
    });
  }
  
  // Comparar fuentes de informaci√≥n
  console.log('\nüîç FUENTES DE INFORMACI√ìN:');
  
  if (results.scraping?.success) {
    console.log('\n   üìö Scraping + GPT-4:');
    results.scraping.results.forEach((trend, i) => {
      const sources = trend.scrapingData?.sourcesUsed || [];
      const articles = trend.scrapingData?.totalArticles || 0;
      console.log(`     ${trend.name}: ${articles} art√≠culos de [${sources.join(', ')}]`);
    });
  }
  
  if (results.perplexity?.success) {
    console.log('\n   üîç Perplexity Individual:');
    results.perplexity.results.forEach((trend, i) => {
      const searchQuery = trend.about?.search_query || 'N/A';
      console.log(`     ${trend.name}: B√∫squeda contextualizada "${searchQuery}"`);
    });
  }
  
  // Mostrar ejemplos de calidad de informaci√≥n para tendencias espec√≠ficas
  console.log('\nüìù CALIDAD DE INFORMACI√ìN (Ejemplos de tendencias importantes):');
  
  const importantTrends = ['Alejandro Giammattei', 'Napoli', 'Morat']; // Ejemplos variados
  
  importantTrends.forEach((trendName) => {
    const trendIndex = testTrends.findIndex(t => t.name === trendName);
    if (trendIndex === -1) return;
    
    console.log(`\n   üîç ${trendName}:`);
    
    if (results.scraping?.success && results.scraping.results[trendIndex]) {
      const summary = results.scraping.results[trendIndex].about.summary;
      const sources = results.scraping.results[trendIndex].scrapingData?.sourcesUsed?.join(', ') || 'N/A';
      console.log(`     üìö Scraping+GPT4: ${summary.substring(0, 150)}...`);
      console.log(`        Fuentes: ${sources}`);
    }
    
    if (results.perplexity?.success && results.perplexity.results[trendIndex]) {
      const summary = results.perplexity.results[trendIndex].about.summary;
      const relevancia = results.perplexity.results[trendIndex].about.relevancia;
      console.log(`     üîç Perplexity: ${summary.substring(0, 150)}...`);
      console.log(`        Relevancia: ${relevancia}, Contexto: Individual`);
    }
  });
  
  // Estad√≠sticas detalladas
  if (results.scraping?.success) {
    const totalArticles = results.scraping.results.reduce((sum, trend) => 
      sum + (trend.scrapingData?.totalArticles || 0), 0);
    const uniqueSources = new Set();
    results.scraping.results.forEach(trend => {
      if (trend.scrapingData?.sourcesUsed) {
        trend.scrapingData.sourcesUsed.forEach(source => uniqueSources.add(source));
      }
    });
    
    console.log('\nüìà ESTAD√çSTICAS SCRAPING + GPT-4:');
    console.log(`   üì∞ Total art√≠culos analizados: ${totalArticles}`);
    console.log(`   üîç Fuentes √∫nicas consultadas: ${Array.from(uniqueSources).join(', ')}`);
  }
  
  if (results.perplexity?.success) {
    const stats = {
      alta: 0, media: 0, baja: 0, 
      contexto_local: 0,
      categorias: {}
    };
    
    results.perplexity.results.forEach(trend => {
      // Relevancia
      const relevancia = trend.about?.relevancia;
      if (relevancia && stats[relevancia] !== undefined) {
        stats[relevancia]++;
      }
      
      // Contexto local
      if (trend.about?.contexto_local) {
        stats.contexto_local++;
      }
      
      // Categor√≠as
      stats.categorias[trend.category] = (stats.categorias[trend.category] || 0) + 1;
    });
    
    console.log('\nüìà ESTAD√çSTICAS PERPLEXITY INDIVIDUAL:');
    console.log(`   üéØ Relevancia alta: ${stats.alta}, media: ${stats.media}, baja: ${stats.baja}`);
    console.log(`   üåç Tendencias con contexto local: ${stats.contexto_local}/${testTrends.length}`);
    console.log(`   üè∑Ô∏è  Categor√≠as m√°s frecuentes: ${Object.entries(stats.categorias)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 3)
      .map(([cat, count]) => `${cat}(${count})`)
      .join(', ')}`);
  }
  
  // Recomendaci√≥n espec√≠fica para estas tendencias
  console.log('\n\nüí° === RECOMENDACI√ìN BASADA EN TENDENCIAS REALES ===');
  console.log('='.repeat(60));
  
  if (results.scraping?.success && results.perplexity?.success) {
    console.log('\nüìä An√°lisis comparativo con datos reales:');
    
    console.log('\n   üï∑Ô∏è Web Scraping + GPT-4 Turbo:');
    console.log('     ‚úÖ Excelente para figuras pol√≠ticas como Alejandro Giammattei');
    console.log('     ‚úÖ Buena cobertura de noticias deportivas (Napoli, SerieA)');
    console.log('     ‚úÖ Informaci√≥n detallada con fuentes verificables');
    console.log('     ‚ö†Ô∏è  M√°s lento para procesar m√∫ltiples tendencias');
    console.log(`     ‚è±Ô∏è  ${(results.scraping.timeMs / 1000 / testTrends.length).toFixed(1)}s por tendencia`);
    
    console.log('\n   üîç Perplexity Individual:');
    console.log('     ‚úÖ Excelente contextualizaci√≥n para cada tendencia');
    console.log('     ‚úÖ Informaci√≥n de relevancia y contexto local');
    console.log('     ‚úÖ B√∫squeda web optimizada y actualizada');
    console.log('     ‚úÖ Mejor manejo de nombres espec√≠ficos');
    console.log(`     ‚è±Ô∏è  ${(results.perplexity.timeMs / 1000 / testTrends.length).toFixed(1)}s por tendencia`);
    
    console.log('\nüèÜ RECOMENDACI√ìN ESPEC√çFICA PARA GUATEMALA:');
    console.log('   üìç Para tendencias POL√çTICAS (Giammattei) ‚Üí Perplexity Individual');
    console.log('   ‚öΩ Para tendencias DEPORTIVAS (Napoli, SerieA) ‚Üí Cualquiera de las dos');
    console.log('   üéµ Para tendencias MUSICALES (Morat) ‚Üí Perplexity Individual');
    console.log('   üåç Para tendencias LOCALES (Santa Mar√≠a de Jes√∫s) ‚Üí Perplexity Individual');
    console.log('   üìä Para VOLUMEN ALTO de tendencias ‚Üí Perplexity Individual');
    console.log('   üîç Para an√°lisis DETALLADO con fuentes ‚Üí Scraping + GPT-4');
    
  } else if (results.scraping?.success) {
    console.log('\n‚úÖ Solo Web Scraping + GPT-4 funcion√≥');
    console.log('üí° Usar como opci√≥n principal para an√°lisis detallado');
    
  } else if (results.perplexity?.success) {
    console.log('\n‚úÖ Solo Perplexity Individual funcion√≥');
    console.log('üí° Usar como opci√≥n principal para procesamiento eficiente');
    console.log('üöÄ Excelente para el contexto guatemalteco espec√≠fico');
    
  } else {
    console.log('\n‚ùå Ninguna opci√≥n funcion√≥ correctamente');
    console.log('üí° Revisar configuraci√≥n de API keys');
  }
  
  console.log('\n‚úÖ COMPARACI√ìN CON TENDENCIAS REALES COMPLETADA');
}

// Funci√≥n para probar solo una opci√≥n espec√≠fica
async function testSingle(option) {
  console.log(`üß™ PROBANDO SOLO: ${option.toUpperCase()} CON TENDENCIAS REALES`);
  console.log('='.repeat(60));
  
  try {
    if (option.toLowerCase() === 'scraping' || option.toLowerCase() === 'gpt4') {
      // Crear versi√≥n espec√≠fica para estas tendencias
      console.log('üìä Tendencias a probar:');
      testTrends.forEach((trend, i) => {
        console.log(`  ${i+1}. ${trend.name} (${trend.volume} menciones)`);
      });
      
      const processed = await scrapingGpt4Module.processWithScrapingPlusGPT4(testTrends, 'Guatemala');
      
      console.log('\nüìã RESULTADOS:');
      processed.forEach((trend, i) => {
        console.log(`\n${i+1}. ${trend.name}`);
        console.log(`   üè∑Ô∏è  Categor√≠a: ${trend.category}`);
        console.log(`   üìù Resumen: ${trend.about.summary.substring(0, 150)}...`);
        console.log(`   üîç Fuentes: ${trend.scrapingData?.sourcesUsed?.join(', ') || 'N/A'}`);
      });
      
    } else if (option.toLowerCase() === 'perplexity') {
      await perplexityIndividualModule.testPerplexityIndividual();
      
    } else {
      console.error('‚ùå Opci√≥n no v√°lida. Usa "scraping", "gpt4" o "perplexity"');
    }
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  }
}

// Ejecutar seg√∫n argumentos de l√≠nea de comandos
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.length > 0) {
    const option = args[0];
    testSingle(option).catch(console.error);
  } else {
    compareApproaches().catch(console.error);
  }
}

module.exports = {
  compareApproaches,
  testSingle,
  testTrends // Exportar las tendencias para uso en otros archivos
}; 