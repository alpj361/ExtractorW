const axios = require('axios');

// ===================================================================
// SCRIPT DE PRUEBA - COMPORTAMIENTO DE COBERTURAS MEJORADO
// ===================================================================

const BASE_URL = 'http://localhost:5002/api';
const TEST_PROJECT_ID = 'tu-project-id-aqui'; // Cambiar por ID real
const AUTH_TOKEN = 'tu-token-aqui'; // Cambiar por token real

async function testCoveragesBehavior() {
    console.log('üß™ PRUEBA DE COMPORTAMIENTO DE COBERTURAS');
    console.log('=============================================\n');

    try {
        // 1. Primera detecci√≥n autom√°tica
        console.log('1Ô∏è‚É£ Primera detecci√≥n autom√°tica...');
        const firstDetection = await axios.post(`${BASE_URL}/coverages/auto-detect`, {
            project_id: TEST_PROJECT_ID
        }, {
            headers: {
                'Authorization': `Bearer ${AUTH_TOKEN}`,
                'Content-Type': 'application/json'
            }
        });

        console.log('‚úÖ Primera detecci√≥n exitosa:');
        console.log(`   üìä ${firstDetection.data.message}`);
        console.log(`   üÜï Coberturas nuevas: ${firstDetection.data.created_count}`);
        console.log(`   üîÑ Coberturas actualizadas: ${firstDetection.data.updated_count || 0}`);
        console.log(`   üìç Total procesadas: ${firstDetection.data.total_processed || firstDetection.data.created_count}`);
        console.log('');

        // Esperar un momento
        await new Promise(resolve => setTimeout(resolve, 2000));

        // 2. Segunda detecci√≥n autom√°tica (deber√≠a actualizar, no crear duplicados)
        console.log('2Ô∏è‚É£ Segunda detecci√≥n autom√°tica (deber√≠a actualizar existentes)...');
        const secondDetection = await axios.post(`${BASE_URL}/coverages/auto-detect`, {
            project_id: TEST_PROJECT_ID
        }, {
            headers: {
                'Authorization': `Bearer ${AUTH_TOKEN}`,
                'Content-Type': 'application/json'
            }
        });

        console.log('‚úÖ Segunda detecci√≥n exitosa:');
        console.log(`   üìä ${secondDetection.data.message}`);
        console.log(`   üÜï Coberturas nuevas: ${secondDetection.data.created_count}`);
        console.log(`   üîÑ Coberturas actualizadas: ${secondDetection.data.updated_count || 0}`);
        console.log(`   üìç Total procesadas: ${secondDetection.data.total_processed || secondDetection.data.created_count}`);
        console.log('');

        // 3. Obtener estado actual de coberturas
        console.log('3Ô∏è‚É£ Verificando estado actual de coberturas...');
        const coveragesResponse = await axios.get(`${BASE_URL}/coverages?project_id=${TEST_PROJECT_ID}`, {
            headers: {
                'Authorization': `Bearer ${AUTH_TOKEN}`,
                'Content-Type': 'application/json'
            }
        });

        console.log('‚úÖ Estado actual de coberturas:');
        console.log(`   üìä Total de coberturas en BD: ${coveragesResponse.data.coverages.length}`);
        
        // Agrupar por tipo
        const groupedByType = coveragesResponse.data.coverages.reduce((acc, coverage) => {
            acc[coverage.coverage_type] = (acc[coverage.coverage_type] || 0) + 1;
            return acc;
        }, {});
        
        console.log('   üìã Por tipo:');
        Object.entries(groupedByType).forEach(([type, count]) => {
            console.log(`      ${type}: ${count} coberturas`);
        });

        console.log('');

        // 4. An√°lisis de comportamiento
        console.log('4Ô∏è‚É£ AN√ÅLISIS DE COMPORTAMIENTO:');
        console.log('=====================================');
        
        if (secondDetection.data.created_count === 0 && secondDetection.data.updated_count > 0) {
            console.log('‚úÖ √âXITO: El sistema est√° actualizando coberturas existentes en lugar de crear duplicados');
            console.log(`   üîÑ Se actualizaron ${secondDetection.data.updated_count} coberturas en la segunda ejecuci√≥n`);
            console.log('   üö´ No se crearon coberturas duplicadas');
        } else if (secondDetection.data.created_count > 0) {
            console.log('‚ö†Ô∏è  ATENCI√ìN: Algunas coberturas se marcaron como nuevas en la segunda ejecuci√≥n');
            console.log('   Esto puede indicar que hay hallazgos en nuevas ciudades/ubicaciones');
            console.log(`   üÜï Nuevas: ${secondDetection.data.created_count}`);
            console.log(`   üîÑ Actualizadas: ${secondDetection.data.updated_count || 0}`);
        } else {
            console.log('‚ÑπÔ∏è  No hab√≠a hallazgos nuevos para procesar en la segunda ejecuci√≥n');
        }

        console.log('\nüéâ PRUEBA COMPLETADA - El sistema ahora distingue correctamente entre crear y actualizar coberturas');

    } catch (error) {
        console.error('‚ùå ERROR EN PRUEBAS:');
        
        if (error.response) {
            console.error(`   Status: ${error.response.status}`);
            console.error(`   Error: ${error.response.data.error}`);
            console.error(`   Detalles: ${error.response.data.details || 'N/A'}`);
        } else if (error.request) {
            console.error('   No se recibi√≥ respuesta del servidor');
            console.error('   ¬øEst√° corriendo ExtractorW en puerto 5002?');
        } else {
            console.error(`   Error de configuraci√≥n: ${error.message}`);
        }
        
        console.log('\n‚ö†Ô∏è  Para usar este script:');
        console.log('   1. Aseg√∫rate de que ExtractorW est√© corriendo en puerto 5002');
        console.log('   2. Actualiza TEST_PROJECT_ID con un ID de proyecto v√°lido');
        console.log('   3. Actualiza AUTH_TOKEN con un token de autenticaci√≥n v√°lido');
    }
}

// Funci√≥n para generar instrucciones de uso
function showUsageInstructions() {
    console.log('üìã INSTRUCCIONES DE USO:');
    console.log('========================');
    console.log('1. Edita las variables TEST_PROJECT_ID y AUTH_TOKEN en este archivo');
    console.log('2. Aseg√∫rate de que ExtractorW est√© corriendo: node server/index.js');
    console.log('3. Ejecuta este script: node test-coverages-behavior.js');
    console.log('4. Observa c√≥mo el sistema distingue entre coberturas nuevas y actualizaciones');
    console.log('');
    console.log('Este script demuestra que el sistema ya NO crea duplicados de coberturas.');
    console.log('En su lugar, actualiza las existentes manteniendo la integridad de los datos.');
    console.log('');
}

// Verificar si se est√°n usando valores por defecto
if (TEST_PROJECT_ID === 'tu-project-id-aqui' || AUTH_TOKEN === 'tu-token-aqui') {
    showUsageInstructions();
} else {
    testCoveragesBehavior();
} 