/**
 * Test simplificado de integraci√≥n de Laura con Memory Service HTTP
 */

const { LauraAgent } = require('./server/services/agents/laura/index');

async function testLauraMemoryIntegration() {
  console.log('üß™ Test Laura Agent + Memory Service (HTTP)\n');

  try {
    // 1. Inicializar Laura Agent (simular agentesService)
    console.log('1Ô∏è‚É£ Inicializando Laura Agent...');
    const mockAgentesService = {};
    const laura = new LauraAgent(mockAgentesService);

    // 2. Verificar que el cliente de memoria est√° configurado
    console.log('\n2Ô∏è‚É£ Verificando configuraci√≥n de memoria...');
    console.log(`   Cliente habilitado: ${laura.memoryClient.enabled}`);
    console.log(`   URL base: ${laura.memoryClient.baseURL}`);

    // 3. Verificar health del servicio
    console.log('\n3Ô∏è‚É£ Verificando salud del servicio...');
    const isHealthy = await laura.memoryClient.isHealthy();
    console.log(`   Servicio saludable: ${isHealthy ? '‚úÖ' : '‚ùå'}`);

    if (!isHealthy) {
      console.log('‚ùå El servicio de memoria no est√° disponible');
      return;
    }

    // 4. Probar guardado de usuario
    console.log('\n4Ô∏è‚É£ Probando guardado de usuario...');
    const testUser = {
      user_name: 'Usuario Test Laura',
      twitter_username: 'test_laura_2025',
      description: 'Usuario de prueba para integraci√≥n Laura',
      category: 'test_integration'
    };

    const saveResult = await laura.memoryClient.saveUserDiscovery(testUser);
    console.log(`   Guardado: ${saveResult.success ? '‚úÖ Exitoso' : '‚ùå Fall√≥'}`);
    if (!saveResult.success) {
      console.log(`   Error: ${saveResult.error}`);
    }

    // 5. Probar b√∫squeda de usuarios
    console.log('\n5Ô∏è‚É£ Probando b√∫squeda de usuarios...');
    const searchResults = await laura.memoryClient.searchUserHandles('test_laura_2025', 3);
    console.log(`   Resultados encontrados: ${searchResults.length}`);
    
    if (searchResults.length > 0) {
      console.log('   ‚úÖ Usuario encontrado en memoria');
      searchResults.forEach((result, index) => {
        console.log(`     ${index + 1}. ${result.substring(0, 80)}...`);
      });
    }

    // 6. Probar contexto pol√≠tico
    console.log('\n6Ô∏è‚É£ Probando memoria pol√≠tica...');
    const politicalContext = await laura.memoryClient.searchPoliticalContext('pol√≠tica', 2);
    console.log(`   Contexto pol√≠tico encontrado: ${politicalContext.length} resultados`);

    console.log('\nüéâ ¬°Integraci√≥n Laura + Memory Service completada!');
    console.log('\nüìã Resumen:');
    console.log(`   ‚Ä¢ Laura Agent inicializado: ‚úÖ`);
    console.log(`   ‚Ä¢ Memory Service conectado: ${isHealthy ? '‚úÖ' : '‚ùå'}`);
    console.log(`   ‚Ä¢ Usuario guardado: ${saveResult.success ? '‚úÖ' : '‚ùå'}`);
    console.log(`   ‚Ä¢ B√∫squeda funcional: ${searchResults.length > 0 ? '‚úÖ' : '‚ùå'}`);
    console.log('\nüöÄ Laura est√° lista para Vizta Chat!');

  } catch (error) {
    console.error('\n‚ùå Error durante el test:', error.message);
    console.error('Stack trace:', error.stack);
    
    console.log('\nüîß Verificaciones:');
    console.log('   ‚Ä¢ ¬øEst√° corriendo el servicio laura_memory en puerto 5001?');
    console.log('   ‚Ä¢ ¬øEst√°n configuradas las variables ZEP_API_KEY?');
    console.log('   ‚Ä¢ ¬øEl servicio Docker est√° ejecut√°ndose?');
  }
}

// Ejecutar test
if (require.main === module) {
  testLauraMemoryIntegration().then(() => {
    console.log('\n‚úÖ Test completado');
    process.exit(0);
  }).catch((error) => {
    console.error('\n‚ùå Test fall√≥:', error);
    process.exit(1);
  });
}

module.exports = { testLauraMemoryIntegration }; 