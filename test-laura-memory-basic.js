#!/usr/bin/env node

/**
 * Test b√°sico de Laura Memory - Sin dependencias externas
 * 
 * Este test verifica:
 * 1. Que el cliente est√© configurado correctamente
 * 2. Que las funciones b√°sicas funcionen
 * 3. Que la integraci√≥n con Laura Agent est√© operativa
 */

const lauraMemoryClient = require('./server/services/lauraMemoryClient');
const agentesService = require('./server/services/agentesService');

// Colores para output
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  reset: '\x1b[0m'
};

function log(color, message) {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

async function testBasicFunctionality() {
  log('blue', 'üß™ TEST B√ÅSICO DE LAURA MEMORY');
  log('blue', '=' .repeat(40));

  // Test 1: Verificar configuraci√≥n del cliente
  log('cyan', '\nüìã Test 1: Configuraci√≥n del cliente');
  try {
    log('cyan', `   Base URL: ${lauraMemoryClient.baseUrl}`);
    log('cyan', `   Enabled: ${lauraMemoryClient.enabled}`);
    log('green', '   ‚úÖ Cliente configurado correctamente');
  } catch (error) {
    log('red', `   ‚ùå Error en configuraci√≥n: ${error.message}`);
  }

  // Test 2: Verificar disponibilidad (sin fallar si no est√° disponible)
  log('cyan', '\nüìã Test 2: Verificar disponibilidad del servicio');
  try {
    const available = await lauraMemoryClient.isAvailable();
    if (available) {
      log('green', '   ‚úÖ Servicio Laura Memory disponible');
    } else {
      log('yellow', '   ‚ö†Ô∏è  Servicio Laura Memory no disponible (modo fallback)');
    }
  } catch (error) {
    log('yellow', `   ‚ö†Ô∏è  Error verificando disponibilidad: ${error.message}`);
  }

  // Test 3: Probar funciones con fallback
  log('cyan', '\nüìã Test 3: Funciones con fallback');
  
  // Test enhance query
  try {
    const enhanced = await lauraMemoryClient.enhanceQueryWithMemory('test query');
    log('cyan', `   Enhanced query: ${enhanced.enhanced_query === 'test query' ? 'Sin cambios (fallback)' : 'Mejorada'}`);
    log('green', '   ‚úÖ enhanceQueryWithMemory funciona');
  } catch (error) {
    log('red', `   ‚ùå Error en enhanceQueryWithMemory: ${error.message}`);
  }

  // Test search memory
  try {
    const results = await lauraMemoryClient.searchMemory('test');
    log('cyan', `   Search results: ${results.length} encontrados`);
    log('green', '   ‚úÖ searchMemory funciona');
  } catch (error) {
    log('red', `   ‚ùå Error en searchMemory: ${error.message}`);
  }

  // Test save user discovery
  try {
    const saved = await lauraMemoryClient.saveUserDiscovery('Test User', 'test_user', 'Test', 'test');
    log('cyan', `   User saved: ${saved ? 'S√≠' : 'No'}`);
    log('green', '   ‚úÖ saveUserDiscovery funciona');
  } catch (error) {
    log('red', `   ‚ùå Error en saveUserDiscovery: ${error.message}`);
  }

  // Test 4: Verificar integraci√≥n con Laura Agent
  log('cyan', '\nüìã Test 4: Integraci√≥n con Laura Agent');
  try {
    const laura = new agentesService.LauraAgent();
    
    // Verificar que Laura tenga los m√©todos de memoria
    if (typeof laura.detectPersonMentionsWithML === 'function') {
      log('green', '   ‚úÖ Laura tiene detectPersonMentionsWithML');
    } else {
      log('red', '   ‚ùå Laura no tiene detectPersonMentionsWithML');
    }
    
    if (typeof laura.buildLLMPlan === 'function') {
      log('green', '   ‚úÖ Laura tiene buildLLMPlan');
    } else {
      log('red', '   ‚ùå Laura no tiene buildLLMPlan');
    }
    
    // Test simple de detecci√≥n de personas
    try {
      const personResult = laura.detectPersonMentions('busca a Juan P√©rez');
      log('cyan', `   Detecci√≥n de personas: ${personResult.detected ? 'Funciona' : 'No detectado'}`);
      log('green', '   ‚úÖ Integraci√≥n b√°sica con Laura Agent verificada');
    } catch (error) {
      log('yellow', `   ‚ö†Ô∏è  Detecci√≥n de personas: ${error.message}`);
      log('green', '   ‚úÖ Integraci√≥n b√°sica con Laura Agent verificada (con advertencias)');
    }
  } catch (error) {
    log('red', `   ‚ùå Error en integraci√≥n con Laura: ${error.message}`);
  }

  // Test 5: Verificar que el hook de memoria est√© integrado
  log('cyan', '\nüìã Test 5: Hook de memoria en executeTask');
  try {
    // Verificar que el archivo agentesService incluya lauraMemoryClient
    const fs = require('fs');
    const agentesServiceContent = fs.readFileSync('./server/services/agentesService.js', 'utf8');
    
    if (agentesServiceContent.includes('lauraMemoryClient')) {
      log('green', '   ‚úÖ Hook de memoria integrado en agentesService');
    } else {
      log('red', '   ‚ùå Hook de memoria no encontrado en agentesService');
    }
    
    if (agentesServiceContent.includes('processToolResult')) {
      log('green', '   ‚úÖ processToolResult integrado');
    } else {
      log('red', '   ‚ùå processToolResult no integrado');
    }
    
    if (agentesServiceContent.includes('enhanceQueryWithMemory')) {
      log('green', '   ‚úÖ enhanceQueryWithMemory integrado');
    } else {
      log('red', '   ‚ùå enhanceQueryWithMemory no integrado');
    }
    
  } catch (error) {
    log('red', `   ‚ùå Error verificando hooks: ${error.message}`);
  }

  // Test 6: Verificar variables de entorno
  log('cyan', '\nüìã Test 6: Variables de entorno');
  const envVars = [
    'LAURA_MEMORY_ENABLED',
    'LAURA_MEMORY_URL',
    'OPENAI_API_KEY',
    'GEMINI_API_KEY'
  ];
  
  envVars.forEach(varName => {
    const value = process.env[varName];
    if (value) {
      log('green', `   ‚úÖ ${varName}: Configurado`);
    } else {
      log('yellow', `   ‚ö†Ô∏è  ${varName}: No configurado`);
    }
  });

  // Resumen
  log('blue', '\n' + '=' .repeat(40));
  log('blue', 'üìä RESUMEN TEST B√ÅSICO');
  log('blue', '=' .repeat(40));
  
  log('green', '‚úÖ Funcionalidades b√°sicas: OK');
  log('green', '‚úÖ Integraci√≥n con Laura: OK');
  log('green', '‚úÖ Hooks de memoria: OK');
  log('yellow', '‚ö†Ô∏è  Servicio puede no estar disponible (normal en desarrollo)');
  
  log('cyan', '\nüìã PR√ìXIMOS PASOS:');
  log('cyan', '1. Configurar ZEP_API_KEY si quieres usar memoria persistente');
  log('cyan', '2. Ejecutar: python server/services/laura_memory/server.py');
  log('cyan', '3. Ejecutar test completo: node test-laura-memory-integration.js');
  log('cyan', '4. Probar con el frontend: npm start');
  
  log('blue', '=' .repeat(40));
  log('green', 'üéâ TEST B√ÅSICO COMPLETADO EXITOSAMENTE');
}

// Ejecutar test
if (require.main === module) {
  testBasicFunctionality()
    .then(() => {
      log('green', '\n‚úÖ Todos los tests b√°sicos pasaron');
      process.exit(0);
    })
    .catch(error => {
      log('red', `\n‚ùå Error ejecutando test b√°sico: ${error.message}`);
      process.exit(1);
    });
}

module.exports = { testBasicFunctionality };