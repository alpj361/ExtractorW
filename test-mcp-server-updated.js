require('dotenv').config();
const axios = require('axios');

// Configuraci√≥n
const EXTRACTOR_W_URL = process.env.EXTRACTOR_W_URL || 'http://localhost:8080';
const TEST_JWT_TOKEN = process.env.TEST_JWT_TOKEN || 'your_test_jwt_token_here';

// Headers con autenticaci√≥n
const headers = {
  'Authorization': `Bearer ${TEST_JWT_TOKEN}`,
  'Content-Type': 'application/json'
};

console.log('üß™ PRUEBA COMPLETA DEL MCP SERVER ACTUALIZADO');
console.log('================================================');
console.log(`üåê URL Base: ${EXTRACTOR_W_URL}`);
console.log(`üîë Token: ${TEST_JWT_TOKEN ? 'Configurado' : 'NO CONFIGURADO'}`);
console.log('');

/**
 * Prueba 1: Estado del MCP Server
 */
async function testMCPStatus() {
  try {
    console.log('üìä Probando estado del MCP Server...');
    const response = await axios.get(`${EXTRACTOR_W_URL}/api/mcp/status`);
    
    console.log('‚úÖ Estado obtenido exitosamente:');
    console.log(`   ‚Ä¢ Servidor: ${response.data.status.server_name}`);
    console.log(`   ‚Ä¢ Versi√≥n: ${response.data.status.version}`);
    console.log(`   ‚Ä¢ Estado: ${response.data.status.status}`);
    console.log(`   ‚Ä¢ Herramientas disponibles: ${response.data.status.available_tools}`);
    console.log(`   ‚Ä¢ ExtractorT: ${response.data.status.external_services?.extractor_t?.status || 'unknown'}`);
    
    return response.data;
  } catch (error) {
    console.error('‚ùå Error obteniendo estado:', error.response?.data || error.message);
    throw error;
  }
}

/**
 * Prueba 2: Listar herramientas disponibles
 */
async function testListTools() {
  try {
    console.log('\nüîß Probando listado de herramientas...');
    const response = await axios.get(`${EXTRACTOR_W_URL}/api/mcp/tools`);
    
    console.log('‚úÖ Herramientas obtenidas exitosamente:');
    response.data.tools.forEach(tool => {
      console.log(`   ‚Ä¢ ${tool.name}: ${tool.description}`);
      console.log(`     Categor√≠a: ${tool.category} | Cr√©ditos: ${tool.usage_credits}`);
      if (tool.features) {
        console.log(`     Caracter√≠sticas: ${tool.features.join(', ')}`);
      }
    });
    
    return response.data;
  } catch (error) {
    console.error('‚ùå Error listando herramientas:', error.response?.data || error.message);
    throw error;
  }
}

/**
 * Prueba 3: Informaci√≥n de herramienta espec√≠fica
 */
async function testGetToolInfo() {
  try {
    console.log('\nüìã Probando informaci√≥n de nitter_context...');
    const response = await axios.get(`${EXTRACTOR_W_URL}/api/mcp/tools/nitter_context`);
    
    console.log('‚úÖ Informaci√≥n obtenida exitosamente:');
    console.log(`   ‚Ä¢ Nombre: ${response.data.tool.name}`);
    console.log(`   ‚Ä¢ Descripci√≥n: ${response.data.tool.description}`);
    console.log(`   ‚Ä¢ Categor√≠a: ${response.data.tool.category}`);
    console.log(`   ‚Ä¢ Cr√©ditos: ${response.data.tool.usage_credits}`);
    console.log('   ‚Ä¢ Par√°metros:');
    Object.entries(response.data.tool.parameters).forEach(([param, config]) => {
      console.log(`     - ${param}: ${config.type} ${config.required ? '(requerido)' : '(opcional)'}`);
    });
    
    return response.data;
  } catch (error) {
    console.error('‚ùå Error obteniendo info de herramienta:', error.response?.data || error.message);
    throw error;
  }
}

/**
 * Prueba 4: Ejecutar nitter_context con an√°lisis completo
 */
async function testNitterContextComplete() {
  try {
    console.log('\nüê¶ Probando nitter_context con an√°lisis completo...');
    
    const testData = {
      q: "guatemala",
      location: "guatemala",
      limit: 3,
      session_id: `test_session_${Date.now()}`
    };
    
    console.log(`   Par√°metros: query="${testData.q}", limit=${testData.limit}`);
    
    const startTime = Date.now();
    const response = await axios.post(
      `${EXTRACTOR_W_URL}/api/mcp/nitter_context`, 
      testData, 
      { headers }
    );
    const endTime = Date.now();
    
    console.log('‚úÖ An√°lisis completado exitosamente:');
    console.log(`   ‚Ä¢ Query: "${response.data.query}"`);
    console.log(`   ‚Ä¢ Ubicaci√≥n: ${response.data.location}`);
    console.log(`   ‚Ä¢ Session ID: ${response.data.session_id}`);
    console.log(`   ‚Ä¢ Tiempo total: ${endTime - startTime}ms`);
    
    const result = response.data.result;
    if (result.success) {
      console.log('\nüìä M√©tricas del an√°lisis:');
      console.log(`   ‚Ä¢ Categor√≠a detectada: ${result.categoria}`);
      console.log(`   ‚Ä¢ Tweets encontrados: ${result.tweet_count}`);
      console.log(`   ‚Ä¢ Tweets guardados: ${result.tweets_saved}`);
      console.log(`   ‚Ä¢ Engagement total: ${result.total_engagement}`);
      console.log(`   ‚Ä¢ Engagement promedio: ${result.avg_engagement}`);
      console.log(`   ‚Ä¢ Tiempo de procesamiento: ${result.execution_time}ms`);
      
      if (result.tweets && result.tweets.length > 0) {
        console.log('\nüê¶ Muestra de tweets analizados:');
        result.tweets.slice(0, 2).forEach((tweet, index) => {
          console.log(`   ${index + 1}. @${tweet.usuario}`);
          console.log(`      üìù "${tweet.texto.substring(0, 60)}..."`);
          console.log(`      üí≠ Sentimiento: ${tweet.sentimiento} (${tweet.score_sentimiento})`);
          console.log(`      üéØ Intenci√≥n: ${tweet.intencion_comunicativa}`);
          console.log(`      üìä Engagement: ${tweet.likes + tweet.retweets + tweet.replies}`);
          console.log(`      üè∑Ô∏è Entidades: ${tweet.entidades_mencionadas?.length || 0}`);
        });
      }
      
      console.log(`\nüìù Resumen: ${result.summary}`);
    }
    
    return response.data;
  } catch (error) {
    console.error('‚ùå Error ejecutando nitter_context:', error.response?.data || error.message);
    throw error;
  }
}

/**
 * Prueba 5: Ejecutor universal MCP
 */
async function testUniversalExecutor() {
  try {
    console.log('\n‚ö° Probando ejecutor universal MCP...');
    
    const testData = {
      tool_name: "nitter_context",
      parameters: {
        q: "economia guatemala",
        location: "guatemala",
        limit: 2,
        session_id: `universal_test_${Date.now()}`
      }
    };
    
    const response = await axios.post(
      `${EXTRACTOR_W_URL}/api/mcp/execute`, 
      testData, 
      { headers }
    );
    
    console.log('‚úÖ Ejecutor universal funcionando:');
    console.log(`   ‚Ä¢ Herramienta: ${response.data.tool_name}`);
    console.log(`   ‚Ä¢ Mensaje: ${response.data.message}`);
    console.log(`   ‚Ä¢ Tweets procesados: ${response.data.result.tweet_count || 0}`);
    
    return response.data;
  } catch (error) {
    console.error('‚ùå Error en ejecutor universal:', error.response?.data || error.message);
    throw error;
  }
}

/**
 * Prueba 6: Capacidades MCP (para N8N)
 */
async function testMCPCapabilities() {
  try {
    console.log('\nüîç Probando capacidades MCP...');
    const response = await axios.get(`${EXTRACTOR_W_URL}/api/mcp/capabilities`);
    
    console.log('‚úÖ Capacidades obtenidas:');
    console.log(`   ‚Ä¢ Protocolo: ${response.data.protocolVersion}`);
    console.log(`   ‚Ä¢ Servidor: ${response.data.serverInfo.name}`);
    console.log(`   ‚Ä¢ Herramientas disponibles: ${response.data.tools.length}`);
    
    response.data.tools.forEach(tool => {
      console.log(`     - ${tool.name}: ${tool.description}`);
      if (tool.features) {
        console.log(`       Caracter√≠sticas: ${tool.features.join(', ')}`);
      }
    });
    
    return response.data;
  } catch (error) {
    console.error('‚ùå Error obteniendo capacidades:', error.response?.data || error.message);
    throw error;
  }
}

/**
 * Ejecutar todas las pruebas
 */
async function runAllTests() {
  const results = {};
  
  try {
    // Verificar configuraci√≥n
    if (!TEST_JWT_TOKEN || TEST_JWT_TOKEN === 'your_test_jwt_token_here') {
      console.log('‚ö†Ô∏è  ADVERTENCIA: TEST_JWT_TOKEN no configurado. Algunas pruebas fallar√°n.');
      console.log('   Configure un token JWT v√°lido en .env para pruebas completas.\n');
    }
    
    // Ejecutar pruebas
    results.status = await testMCPStatus();
    results.tools = await testListTools();
    results.toolInfo = await testGetToolInfo();
    results.capabilities = await testMCPCapabilities();
    
    // Pruebas que requieren autenticaci√≥n
    if (TEST_JWT_TOKEN && TEST_JWT_TOKEN !== 'your_test_jwt_token_here') {
      results.nitterContext = await testNitterContextComplete();
      results.universalExecutor = await testUniversalExecutor();
    } else {
      console.log('\n‚è≠Ô∏è  Saltando pruebas de ejecuci√≥n (requieren autenticaci√≥n)');
    }
    
    console.log('\nüéâ TODAS LAS PRUEBAS COMPLETADAS EXITOSAMENTE');
    console.log('='.repeat(50));
    console.log('‚úÖ MCP Server funcionando correctamente');
    console.log('‚úÖ Nueva implementaci√≥n de nitter_context integrada');
    console.log('‚úÖ An√°lisis con Gemini AI operativo');
    console.log('‚úÖ Guardado en base de datos funcionando');
    
  } catch (error) {
    console.log('\n‚ùå PRUEBAS FALLIDAS');
    console.log('='.repeat(50));
    console.error('Error:', error.message);
    
    if (error.response) {
      console.error('Respuesta del servidor:', error.response.data);
      console.error('Status:', error.response.status);
    }
    
    process.exit(1);
  }
}

// Ejecutar pruebas si el script se ejecuta directamente
if (require.main === module) {
  runAllTests();
}

module.exports = {
  testMCPStatus,
  testListTools,
  testGetToolInfo,
  testNitterContextComplete,
  testUniversalExecutor,
  testMCPCapabilities,
  runAllTests
}; 