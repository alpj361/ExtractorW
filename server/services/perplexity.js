const { detectarCategoria } = require('./categorization');

/**
 * Obtiene informaci√≥n contextualizada individual para una tendencia usando Perplexity
 * @param {string} trendName - Nombre de la tendencia
 * @param {string} location - Ubicaci√≥n para contexto (Guatemala)
 * @param {number} year - A√±o actual
 * @returns {Object} - Informaci√≥n estructurada sobre la tendencia
 */
async function getAboutFromPerplexityIndividual(trendName, location = 'Guatemala', year = 2025) {
  const PERPLEXITY_API_KEY = process.env.PERPLEXITY_API_KEY;
  
  if (!PERPLEXITY_API_KEY) {
    console.log(`‚ö†Ô∏è  PERPLEXITY_API_KEY no configurada para ${trendName}`);
    const now = new Date();
    return {
      nombre: trendName,
      tipo: 'hashtag',
      relevancia: 'baja',
      razon_tendencia: `Tendencia relacionada con ${trendName}`,
      fecha_evento: now.toLocaleDateString('es-ES', { day: 'numeric', month: 'long', year: 'numeric' }),
      palabras_clave: [trendName],
      categoria: 'Otros',
      contexto_local: true,
      source: 'default',
      model: 'default'
    };
  }

  try {
    console.log(`üîç Buscando informaci√≥n individual para: "${trendName}"`);
    
    // Obtener fecha actual din√°mica
    const now = new Date();
    const currentYear = now.getFullYear();
    const currentMonth = now.toLocaleString('es-ES', { month: 'long' });
    const currentDate = now.toLocaleDateString('es-ES', { day: 'numeric', month: 'long', year: 'numeric' });
    
    // Construir consulta espec√≠fica para b√∫squeda web
    const searchQuery = `${trendName} ${location} ${currentMonth} ${currentYear} noticias actualidad`;
    
    // Consultas adicionales para mejorar la b√∫squeda
    const alternativeQueries = [
      `${trendName} f√∫tbol ${currentMonth} ${currentYear}`, // Para deportes
      `${trendName} retiro futbol ${currentMonth} ${currentYear}`, // Para retiros
      `${trendName} jugador ${currentMonth} ${currentYear}`, // Para jugadores
      `${trendName} noticia mayo 2025`, // B√∫squeda directa por fecha
      `"${trendName}" trending ${currentMonth} 2025` // B√∫squeda exacta
    ];
    
    // Prompt mejorado con fecha din√°mica y mejor enfoque en la raz√≥n exacta
    const prompt = `Analiza la tendencia "${trendName}" y explica POR QU√â est√° siendo tendencia ESPEC√çFICAMENTE en ${currentMonth} ${currentYear}.

FECHA ACTUAL: ${currentDate}

INSTRUCCIONES ESPEC√çFICAS:
1. "${trendName}" puede ser:
   - Un APODO de una persona famosa (ej: jugador de f√∫tbol, artista, pol√≠tico)
   - Un nombre completo de persona
   - Un evento, equipo, pel√≠cula, √°lbum, etc.
   
2. Si es un APODO, identifica la persona real detr√°s del apodo
   - Ejemplo: "Lukita" podr√≠a ser el apodo de un futbolista
   - Busca tanto el apodo como posibles nombres reales
   
3. Busca eventos ESPEC√çFICOS y RECIENTES (${currentMonth} ${currentYear}):
   - Retiros de deportistas
   - Lanzamientos (√°lbums, pel√≠culas, productos)  
   - Transferencias de jugadores
   - Noticias actuales (pol√≠tica, esc√°ndalos, declaraciones)
   - Eventos deportivos (partidos, lesiones, controversias)
   
4. Si no encuentras informaci√≥n espec√≠fica para ${currentMonth} ${currentYear}, busca:
   - Eventos recientes en 2025
   - Anuncios importantes
   - Cambios de carrera o retiros
   
5. Determina si es:
   - TENDENCIA LOCAL: Relacionada directamente con ${location}
   - TENDENCIA GLOBAL: Internacional pero que interesa en ${location}
   
6. NO digas "no hay informaci√≥n" - busca m√°s profundo
7. S√â ESPEC√çFICO sobre el evento que caus√≥ la tendencia

EJEMPLOS DE AN√ÅLISIS PRECISO:
- Si es deportes: ¬øRetiro? ¬øTransferencia? ¬øLesi√≥n? ¬øPartido importante?
- Si es apodo de jugador: ¬øQui√©n es realmente? ¬øQu√© pas√≥ con √©l?
- Si es pol√≠tica: ¬øQu√© declaraci√≥n? ¬øQu√© acci√≥n? ¬øQu√© investigaci√≥n?
- Si es entretenimiento: ¬øQu√© se estren√≥? ¬øQu√© se anunci√≥?

Responde en formato JSON:
{
  "nombre": "Nombre completo/real si es un apodo, sino el nombre limpio",
  "apodo": "${trendName}" (si es diferente del nombre real),
  "tipo": "persona|evento|hashtag|tema|equipo|pel√≠cula|serie|m√∫sica|√°lbum|artista|futbolista",
  "categoria": "Categor√≠a espec√≠fica",
  "resumen": "Explicaci√≥n de 2-3 oraciones sobre QU√â ES y POR QU√â es tendencia AHORA en ${currentMonth} ${currentYear}. S√â ESPEC√çFICO sobre el evento exacto.",
  "relevancia": "alta|media|baja",
  "contexto_local": true/false,
  "razon_tendencia": "Evento espec√≠fico y exacto que caus√≥ que sea tendencia ahora",
  "fecha_evento": "Fecha aproximada del evento que caus√≥ la tendencia",
  "palabras_clave": ["palabra1", "palabra2", "palabra3"]
}`;

    const payload = {
      model: 'sonar',
      messages: [
        {
          role: 'system',
          content: `Eres un analista de tendencias especializado en identificar POR QU√â algo es tendencia en redes sociales EN ESTE MOMENTO (${currentMonth} ${currentYear}). Tu expertise incluye:

- Detectar eventos actuales ESPEC√çFICOS que generan tendencias (lanzamientos, controversias, partidos, noticias, anuncios)
- Identificar APODOS y nombres reales de personas famosas (especialmente deportistas)
- Distinguir entre tendencias locales de ${location} vs tendencias globales que interesan en ${location}
- Identificar el contexto temporal EXACTO (¬øqu√© pas√≥ HOY/ESTA SEMANA/ESTE MES que lo hizo tendencia?)
- No rendirse f√°cilmente - buscar informaci√≥n profundamente
- Ser PRECISO sobre la relevancia real para el p√∫blico de ${location}
- Enfocarte en EVENTOS ESPEC√çFICOS no generalidades

FECHA ACTUAL: ${currentDate}
Enf√≥cate en la ACTUALIDAD y en eventos ESPEC√çFICOS Y EXACTOS que explican por qu√© algo es tendencia AHORA.

IMPORTANTE: Si "${trendName}" parece ser un apodo, busca tanto el apodo como el nombre real de la persona.`
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      search_context: {
        search_queries: [searchQuery, ...alternativeQueries]
      },
      temperature: 0.3,
      max_tokens: 500
    };

    console.log(`   üì° Realizando consulta a Perplexity...`);
    
    const response = await fetch('https://api.perplexity.ai/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${PERPLEXITY_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload)
    });

    if (response.ok) {
      const data = await response.json();
      if (data.choices && data.choices[0] && data.choices[0].message) {
        let rawResponse = data.choices[0].message.content;
        console.log(`   ‚úÖ Respuesta recibida para ${trendName}`);
        
        try {
          // Intentar extraer JSON de la respuesta
          const jsonMatch = rawResponse.match(/\{[\s\S]*\}/);
          if (jsonMatch) {
            const parsed = JSON.parse(jsonMatch[0]);
            
            // Enriquecer con metadata
            const enriched = {
              ...parsed,
              source: 'perplexity',
              model: 'sonar',
              search_query: searchQuery,
              timestamp: new Date().toISOString(),
              raw_response: rawResponse
            };
            
            console.log(`   üìä ${trendName}: Categor√≠a=${enriched.categoria}, Relevancia=${enriched.relevancia}`);
            return enriched;
          }
        } catch (parseError) {
          console.log(`   ‚ö†Ô∏è  Error parseando JSON para ${trendName}, usando respuesta raw`);
        }
        
        // Si no se puede parsear JSON, crear estructura manual
        return {
          nombre: trendName,
          tipo: 'hashtag',
          categoria: detectarCategoria(trendName, rawResponse),
          resumen: rawResponse.substring(0, 300),
          relevancia: 'media',
          contexto_local: rawResponse.toLowerCase().includes('guatemala'),
          palabras_clave: [trendName],
          source: 'perplexity',
          model: 'sonar',
          raw_response: rawResponse
        };
      }
    } else {
      const errorText = await response.text();
      console.error(`   ‚ùå Error Perplexity para ${trendName}:`, errorText.substring(0, 200));
    }

    // Fallback en caso de error
    return {
      nombre: trendName,
      resumen: `Tendencia relacionada con ${trendName}`,
      categoria: detectarCategoria(trendName),
      tipo: 'hashtag',
      relevancia: 'baja',
      contexto_local: false,
      source: 'default',
      model: 'default'
    };
  } catch (error) {
    console.error(`   ‚ùå Error en getAboutFromPerplexityIndividual para ${trendName}:`, error.message);
    
    return {
      nombre: trendName,
      resumen: `Error procesando informaci√≥n sobre ${trendName}`,
      categoria: detectarCategoria(trendName),
      tipo: 'hashtag',
      relevancia: 'baja',
      contexto_local: false,
      source: 'error',
      error_message: error.message
    };
  }
}

/**
 * Categoriza una tendencia usando Perplexity con contexto espec√≠fico
 * @param {string} trendName - Nombre de la tendencia
 * @param {string} location - Ubicaci√≥n para contexto
 * @returns {string} - Categor√≠a en espa√±ol
 */
async function categorizeTrendWithPerplexityIndividual(trendName, location = 'Guatemala') {
  const PERPLEXITY_API_KEY = process.env.PERPLEXITY_API_KEY;
  
  if (!PERPLEXITY_API_KEY) {
    return detectarCategoria(trendName);
  }

  try {
    console.log(`üè∑Ô∏è  Categorizando con Perplexity: "${trendName}"`);
    
    const prompt = `Categoriza la siguiente tendencia en el contexto de ${location}:

TENDENCIA: "${trendName}"

Analiza el t√©rmino y determina la categor√≠a m√°s espec√≠fica. Considera:
- Si es una persona (pol√≠tica, deporte, entretenimiento, etc.)
- Si es un evento (pol√≠tico, deportivo, cultural, etc.)
- Si es un tema de actualidad
- Su relevancia para Guatemala

CATEGOR√çAS DISPONIBLES:
Pol√≠tica, Deportes, M√∫sica, Entretenimiento, Econom√≠a, Tecnolog√≠a, Salud, 
Educaci√≥n, Cultura, Sociedad, Internacional, Ciencia, Justicia, Seguridad, 
Medio ambiente, Moda, Far√°ndula, Otros

Responde √öNICAMENTE con el nombre de la categor√≠a, sin explicaci√≥n.`;

    const response = await fetch('https://api.perplexity.ai/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${PERPLEXITY_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'sonar',
        messages: [
          {
            role: 'system',
            content: `Eres un experto en categorizaci√≥n de tendencias para ${location}. Respondes solo con el nombre de la categor√≠a m√°s adecuada.`
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.1,
        max_tokens: 20
      })
    });

    if (response.ok) {
      const data = await response.json();
      if (data.choices && data.choices[0] && data.choices[0].message) {
        const category = data.choices[0].message.content.trim().replace(/[^\w\s√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë]/g, '');
        console.log(`   ‚úÖ Categor√≠a: ${category}`);
        return category;
      }
    }

    return detectarCategoria(trendName);
  } catch (error) {
    console.error(`   ‚ùå Error categorizando ${trendName}:`, error.message);
    return detectarCategoria(trendName);
  }
}

/**
 * Procesa m√∫ltiples tendencias usando llamadas individuales a Perplexity
 * @param {Array} trends - Array de tendencias
 * @param {string} location - Ubicaci√≥n para contexto
 * @returns {Array} - Tendencias procesadas
 */
async function processWithPerplexityIndividual(trends, location = 'Guatemala') {
  console.log(`\nüîç INICIANDO PROCESAMIENTO: PERPLEXITY INDIVIDUAL (${trends.length} tendencias)`);
  console.log('='.repeat(80));
  
  const processedTrends = [];
  const now = new Date();
  const currentYear = now.getFullYear();
  const currentMonth = now.toLocaleString('es-ES', { month: 'long' });

  console.log(`üìÖ Fecha actual: ${now.toLocaleDateString('es-ES', { day: 'numeric', month: 'long', year: 'numeric' })}`);
  console.log(`üåç Ubicaci√≥n: ${location}`);

  for (let i = 0; i < trends.length; i++) {
    const trend = trends[i];
    const trendName = trend.name || trend.keyword || trend.text || `Tendencia ${i+1}`;
    
    console.log(`\nüìä Procesando ${i+1}/${trends.length}: "${trendName}"`);
    console.log('‚îÄ'.repeat(60));
    
    try {
      // 1. Obtener informaci√≥n completa
      const aboutInfo = await getAboutFromPerplexityIndividual(trendName, location, currentYear);
      
      // 2. Categorizar (usar la categor√≠a del about si est√° disponible)
      const category = aboutInfo.categoria || await categorizeTrendWithPerplexityIndividual(trendName, location);
      
      const processedTrend = {
        name: trendName,
        volume: trend.volume || trend.count || 1,
        category: category,
        about: {
          nombre: aboutInfo.nombre || trendName,
          tipo: aboutInfo.tipo || 'hashtag',
          relevancia: aboutInfo.relevancia?.toLowerCase() || 'media',
          razon_tendencia: aboutInfo.razon_tendencia || `Tendencia relacionada con ${trendName}`,
          fecha_evento: aboutInfo.fecha_evento || now.toLocaleDateString('es-ES', { day: 'numeric', month: 'long', year: 'numeric' }),
          palabras_clave: aboutInfo.palabras_clave || [trendName],
          categoria: category,
          contexto_local: aboutInfo.contexto_local !== undefined ? aboutInfo.contexto_local : true,
          source: aboutInfo.source || 'perplexity-individual',
          model: aboutInfo.model || 'sonar'
        },
        metadata: {
          timestamp: new Date().toISOString(),
          location: location,
          year: currentYear,
          month: currentMonth
        },
        original: trend
      };
      
      processedTrends.push(processedTrend);
      
      console.log(`   ‚úÖ Categor√≠a: ${category}`);
      console.log(`   üéØ Relevancia: ${aboutInfo.relevancia}`);
      console.log(`   üåç Contexto local: ${aboutInfo.contexto_local ? 'S√≠' : 'No'}`);
      console.log(`   üí• Raz√≥n: ${aboutInfo.razon_tendencia || 'No especificada'}`);
      
      // Pausa entre llamadas para ser respetuoso con la API
      if (i < trends.length - 1) {
        console.log(`   ‚è≥ Pausa de 2 segundos...`);
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
      
    } catch (error) {
      console.error(`   ‚ùå Error procesando "${trendName}":`, error.message);
      
      // Agregar con valores por defecto manteniendo la estructura correcta
      processedTrends.push({
        name: trendName,
        volume: trend.volume || trend.count || 1,
        category: detectarCategoria(trendName),
        about: {
          nombre: trendName,
          tipo: 'hashtag',
          relevancia: 'baja',
          razon_tendencia: `Error procesando informaci√≥n sobre ${trendName}`,
          fecha_evento: now.toLocaleDateString('es-ES', { day: 'numeric', month: 'long', year: 'numeric' }),
          palabras_clave: [trendName],
          categoria: detectarCategoria(trendName),
          contexto_local: true,
          source: 'error',
          model: 'error'
        },
        original: trend
      });
    }
  }
  
  console.log('\n‚úÖ PROCESAMIENTO PERPLEXITY INDIVIDUAL COMPLETADO');
  console.log('='.repeat(80));
  
  return processedTrends;
}

/**
 * Genera estad√≠sticas a partir de las tendencias procesadas
 * @param {Array} processedTrends - Tendencias procesadas
 * @returns {Object} - Estad√≠sticas generadas
 */
function generateStatistics(processedTrends) {
  console.log(`üî¢ Generando estad√≠sticas para ${processedTrends.length} tendencias...`);
  
  // Inicializar estad√≠sticas
  const stats = {
    total: processedTrends.length,
    categorias: {},
    relevancia: { alta: 0, media: 0, baja: 0 },
    contexto: { local: 0, global: 0 },
    tipos: {},
    timestamp: new Date().toISOString()
  };
  
  // Procesar cada tendencia
  processedTrends.forEach(trend => {
    // Categor√≠as
    const category = trend.category || 'Otros';
    stats.categorias[category] = (stats.categorias[category] || 0) + 1;
    
    // Relevancia
    if (trend.about && trend.about.relevancia) {
      const relevancia = trend.about.relevancia.toLowerCase();
      if (['alta', 'media', 'baja'].includes(relevancia)) {
        stats.relevancia[relevancia] = (stats.relevancia[relevancia] || 0) + 1;
      }
    }
    
    // Contexto local vs global
    if (trend.about && trend.about.contexto_local !== undefined) {
      if (trend.about.contexto_local) {
        stats.contexto.local += 1;
      } else {
        stats.contexto.global += 1;
      }
    }
    
    // Tipos
    if (trend.about && trend.about.tipo) {
      const tipo = trend.about.tipo;
      stats.tipos[tipo] = (stats.tipos[tipo] || 0) + 1;
    }
  });
  
  console.log('üìä Estad√≠sticas generadas:', JSON.stringify({
    total: stats.total,
    categorias_count: Object.keys(stats.categorias).length,
    relevancia: stats.relevancia,
    contexto: stats.contexto
  }, null, 2));
  
  return stats;
}

// Funciones auxiliares para determinar los valores correctos
function determinarTipo(trendName) {
  // L√≥gica para determinar el tipo basado en el nombre y contenido
  if (trendName.match(/^[A-Z][a-z]+ ?[A-Z][a-z]+$/)) return 'persona';
  if (trendName.match(/^#/)) return 'hashtag';
  if (trendName.match(/^[A-Z][a-z]+ ?\d{4}$/)) return 'evento';
  if (trendName.match(/^[A-Z][a-z]+$/)) return 'lugar';
  return 'tema';
}

function determinarRelevancia() {
  // Por ahora retornamos un valor aleatorio entre Alta, Media, Baja
  const relevancia = ['Alta', 'Media', 'Baja'];
  return relevancia[Math.floor(Math.random() * relevancia.length)];
}

function obtenerRazonTendencia() {
  // Aqu√≠ ir√≠a la l√≥gica para extraer la raz√≥n de tendencia del an√°lisis de Perplexity
  return 'An√°lisis en proceso...';
}

function obtenerFechaEvento() {
  // Aqu√≠ ir√≠a la l√≥gica para extraer la fecha del evento si existe
  const now = new Date();
  return now.toLocaleDateString('es-ES', { day: 'numeric', month: 'long', year: 'numeric' });
}

function obtenerPalabrasClave() {
  // Aqu√≠ ir√≠a la l√≥gica para extraer palabras clave relevantes
  return [];
}

function determinarContextoLocal(location) {
  // Por defecto asumimos que es contexto local
  return true;
}

module.exports = {
  getAboutFromPerplexityIndividual,
  categorizeTrendWithPerplexityIndividual,
  processWithPerplexityIndividual,
  generateStatistics
}; 