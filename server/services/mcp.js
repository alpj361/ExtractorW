const axios = require('axios');
const { processNitterContext } = require('./nitterContext');
const { processNitterProfile } = require('./nitterProfile'); // ‚úÖ AGREGADO: Importar funci√≥n completa con sentimiento
const { 
  getUserProjects, 
  getUserCodex, 
  getProjectDecisions,
  searchUserCodex, 
  getUserStats,
  saveNitterProfileTweets 
} = require('./supabaseData');

// Importar fetch para Node.js
let fetch;
try {
  fetch = require('node-fetch');
} catch (error) {
  // Fallback para Node.js 18+ que tiene fetch nativo
  fetch = global.fetch;
}

// ===================================================================
// MCP SERVICE - Micro Command Processor
// Orquestador central de herramientas para agentes IA
// ===================================================================

// Configuraci√≥n de servicios externos
function getExtractorTUrl() {
  // Verificar variables de entorno espec√≠ficas primero
  if (process.env.EXTRACTOR_T_URL) {
    return process.env.EXTRACTOR_T_URL;
  }
  
  // Detectar entorno autom√°ticamente
  const isProduction = process.env.NODE_ENV === 'production';
  
  if (isProduction) {
    // PRODUCCI√ìN: Usar URL externa
    return process.env.EXTRACTORT_URL || 'https://api.standatpd.com';
  } else {
    // DESARROLLO: Usar contenedor local con IP del host
    return process.env.EXTRACTORT_LOCAL_URL || 'http://127.0.0.1:8000';
  }
}

const EXTRACTOR_T_URL = getExtractorTUrl();

// Log de configuraci√≥n
console.log(`üîó ExtractorT URL configurada (MCP): ${EXTRACTOR_T_URL}`);

/**
 * Mejora la expansi√≥n de t√©rminos usando Perplexity para contexto adicional
 * @param {string} originalQuery - Query original del usuario
 * @param {boolean} usePerplexity - Si usar Perplexity para mejorar la expansi√≥n
 * @returns {Promise<string>} - Query expandido con contexto de Perplexity
 */
async function enhanceSearchTermsWithPerplexity(originalQuery, usePerplexity = false) {
  try {
    if (!usePerplexity) {
      return expandSearchTerms(originalQuery);
    }

    console.log(`üîç Mejorando expansi√≥n de t√©rminos con Perplexity: "${originalQuery}"`);
    
    const PERPLEXITY_API_KEY = process.env.PERPLEXITY_API_KEY;
    
    if (!PERPLEXITY_API_KEY) {
      console.log('‚ö†Ô∏è PERPLEXITY_API_KEY no disponible, usando expansi√≥n b√°sica');
      return expandSearchTerms(originalQuery);
    }

    // Obtener fecha actual
    const now = new Date();
    const currentMonth = now.toLocaleString('es-ES', { month: 'long' });
    const currentYear = now.getFullYear();

         const enhancementPrompt = `Analiza la consulta "${originalQuery}" y sugiere t√©rminos de b√∫squeda optimizados para Twitter/X en Guatemala.

**FECHA ACTUAL: ${currentDate}**
**CONTEXTO TEMPORAL: ${currentMonth} ${currentYear}, Guatemala**
**OBJETIVO: Optimizar b√∫squeda para obtener tweets RECIENTES y relevantes**

‚ö†Ô∏è FILTRO TEMPORAL CR√çTICO:
- SOLO incluye hashtags y t√©rminos que est√©n siendo usados en ${currentMonth} ${currentYear}
- Agrega modificadores temporales como "2025", "${currentMonth}", "actual", "ahora"
- Incluye hashtags que probablemente est√©n trending HOY

INSTRUCCIONES:
1. Si es sobre una persona, incluye variaciones de su nombre, apodos, cargos Y su estado ACTUAL en ${currentYear}
2. Si es sobre eventos, incluye hashtags probables CON fechas de ${currentMonth} ${currentYear}
3. Si es sobre temas pol√≠ticos, incluye instituciones y t√©rminos oficiales CON contexto de ${currentYear}
4. Si es sobre deportes, incluye equipos, competencias y hashtags deportivos de la temporada ${currentYear}
5. Incluye t√©rminos en espa√±ol que usan los guatemaltecos ACTUALMENTE
6. Considera abreviaciones comunes (GT, Guate, Chapin) con contexto temporal
7. Incluye hashtags que probablemente est√©n trending en ${currentMonth} ${currentYear}
8. AGREGA SIEMPRE modificadores temporales: "2025", "${currentMonth}", "actual", "reciente"

EJEMPLOS ACTUALIZADOS:
- "marcha del orgullo" ‚Üí "Orgullo2025 OR MarchadelOrgullo OR Pride OR LGBTI OR diversidad OR #OrguIIoGt OR Orgullo${currentMonth} OR Pride2025 OR OrgulloActual"
- "presidente guatemala" ‚Üí "BernardoArevalo OR presidente OR GobiernoGt OR CasaPresidencial OR PresidenciaGt OR Arevalo2025 OR GobiernoActual OR Presidente${currentMonth}"

Responde SOLO con los t√©rminos de b√∫squeda optimizados separados por "OR", sin explicaciones.`;

    const payload = {
      model: 'sonar',
      messages: [
        {
          role: 'system',
          content: `Eres un experto en optimizaci√≥n de b√∫squedas en redes sociales para Guatemala. 

Tu trabajo es convertir consultas generales en t√©rminos de b√∫squeda espec√≠ficos que capturen las conversaciones reales de los guatemaltecos en Twitter/X.

Caracter√≠sticas:
- Conoces los apodos y nombres comunes usados en Guatemala
- Identificas hashtags que probablemente est√©n trending
- Incluyes variaciones de nombres oficiales vs populares
- Consideras el contexto temporal actual
- Usas operadores OR para m√°xima cobertura

FECHA ACTUAL: ${currentMonth} ${currentYear}
CONTEXTO: Guatemala`
        },
        {
          role: 'user',
          content: enhancementPrompt
        }
      ],
      temperature: 0.2,
      max_tokens: 200
    };

    const response = await fetch('https://api.perplexity.ai/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${PERPLEXITY_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload)
    });

    if (response.ok) {
      const data = await response.json();
      if (data.choices && data.choices[0] && data.choices[0].message) {
        const enhancedTerms = data.choices[0].message.content.trim();
        console.log(`üöÄ T√©rminos mejorados con Perplexity: "${enhancedTerms}"`);
        return enhancedTerms;
      }
    }

    console.log('‚ö†Ô∏è Error con Perplexity, usando expansi√≥n b√°sica');
    return expandSearchTerms(originalQuery);

  } catch (error) {
    console.error('‚ùå Error mejorando t√©rminos con Perplexity:', error);
    return expandSearchTerms(originalQuery);
  }
}

/**
 * Expansi√≥n inteligente de t√©rminos de b√∫squeda para Twitter
 * Convierte consultas generales en b√∫squedas estrat√©gicas espec√≠ficas
 */
function expandSearchTerms(originalQuery) {
  const query = originalQuery.toLowerCase().trim();
  
  // Diccionario de T√âRMINOS REALES que la gente usa en redes sociales guatemaltecas
  const expansions = {
    // Eventos y marchas - T√âRMINOS REALES
    'marcha del orgullo': 'orgullo OR "marcha del orgullo" OR pride OR lgbt OR diversidad OR #orgullogt OR marcha',
    'orgullo': 'orgullo OR "marcha del orgullo" OR pride OR lgbt OR diversidad OR #orgullogt',
    'pride': 'pride OR orgullo OR lgbt OR "marcha del orgullo" OR diversidad',
    
    // Pol√≠tica - T√âRMINOS REALES
    'elecciones': 'elecciones OR tse OR voto OR candidatos OR electoral OR votacion',
    'presidente': 'presidente OR "bernardo arevalo" OR gobierno OR presidencia',
    'gobierno': 'gobierno OR presidente OR "bernardo arevalo" OR presidencia OR ejecutivo',
    'congreso': 'congreso OR diputados OR legislativo OR plenaria OR bancada',
    
    // Econom√≠a - T√âRMINOS REALES
    'economia': 'economia OR inflacion OR empleo OR precios OR quetzal OR guatemala',
    'inflacion': 'inflacion OR precios OR carestia OR caro OR economia',
    'empleo': 'empleo OR trabajo OR desempleo OR oportunidades',
    
    // Deportes - T√âRMINOS REALES
    'futbol': 'futbol OR seleccion OR guatemala OR liga OR deporte',
    'seleccion': 'seleccion OR futbol OR guatemala OR bicolor OR deportes',
    
    // Seguridad - T√âRMINOS REALES
    'seguridad': 'seguridad OR violencia OR delincuencia OR pnc OR crimenes',
    'violencia': 'violencia OR delincuencia OR inseguridad OR crimenes OR seguridad',
    
    // Educaci√≥n - T√âRMINOS REALES
    'educacion': 'educacion OR estudiantes OR maestros OR escuelas OR universidad',
    'universidad': 'universidad OR usac OR estudiantes OR educacion',
    
    // Salud - T√âRMINOS REALES
    'salud': 'salud OR hospitales OR medicos OR medicina OR enfermedad',
    'covid': 'covid OR coronavirus OR pandemia OR vacuna OR salud',
    
    // Cultura - T√âRMINOS REALES
    'cultura': 'cultura OR tradiciones OR guatemala OR arte OR festival',
    'musica': 'musica OR artista OR concierto OR cantante OR guatemala',
    
    // Miner√≠a - T√âRMINOS REALES
    'mineria': 'mineria OR mina OR minera OR extraccion OR "san rafael" OR resistencia',
    'mina': 'mina OR mineria OR minera OR extraccion OR resistencia',
    
    // Protestas - T√âRMINOS REALES  
    'protesta': 'protesta OR manifestacion OR marcha OR resistencia OR derecho',
    'manifestacion': 'manifestacion OR protesta OR marcha OR derecho OR resistencia',
    
    // Lugares espec√≠ficos - T√âRMINOS REALES
    'izabal': 'izabal OR "puerto barrios" OR caribe OR guatemala',
    'antigua': 'antigua OR guatemala OR turismo OR colonial',
    'xela': 'xela OR quetzaltenango OR guatemala OR altiplano'
  };

  // Buscar coincidencias exactas primero
  for (const [key, expansion] of Object.entries(expansions)) {
    if (query.includes(key)) {
      console.log(`üéØ Expansi√≥n REAL encontrada: "${key}" ‚Üí "${expansion}"`);
      return expansion;
    }
  }

  // B√∫squedas por palabras clave con T√âRMINOS REALES
  const keywords = [
    // Pol√≠tica REAL
    { keys: ['bernardo', 'arevalo'], expansion: '"bernardo arevalo" OR presidente OR gobierno OR arevalo' },
    { keys: ['giammattei'], expansion: 'giammattei OR "alejandro giammattei" OR expresidente' },
    { keys: ['tse'], expansion: 'tse OR tribunal OR electoral OR elecciones OR voto' },
    { keys: ['mp', 'ministerio publico'], expansion: 'mp OR "ministerio publico" OR fiscalia OR justicia' },
    
    // Eventos REALES
    { keys: ['cervantino'], expansion: 'cervantino OR festival OR cultura OR antigua' },
    { keys: ['independencia'], expansion: 'independencia OR guatemala OR septiembre OR patria' },
    { keys: ['navidad'], expansion: 'navidad OR posadas OR diciembre OR fiestas' },
    
    // Ubicaciones REALES
    { keys: ['zona viva'], expansion: '"zona viva" OR zona10 OR guatemala OR restaurantes' },
    { keys: ['lago atitlan'], expansion: 'atitlan OR lago OR solola OR turismo' },
    
    // Pa√≠s
    { keys: ['guatemala'], expansion: 'guatemala OR guate OR chapin OR gt' },
    { keys: ['chapin'], expansion: 'chapin OR guatemala OR guate OR guatemalteco' },
  ];

  // Buscar palabras clave
  for (const keywordObj of keywords) {
    if (keywordObj.keys.some(keyword => query.includes(keyword))) {
      console.log(`üîç Palabra clave REAL encontrada: ${keywordObj.keys.join('/')} ‚Üí "${keywordObj.expansion}"`);
      return keywordObj.expansion;
    }
  }

  // FALLBACK INTELIGENTE: Solo agregar t√©rminos que realmente se usan
  // Si la query original ya tiene OR, no modificar
  if (originalQuery.includes(' OR ')) {
    console.log(`‚úÖ Query ya optimizada con OR: "${originalQuery}"`);
    return originalQuery;
  }

  // Limpiar t√©rminos problem√°ticos antes de expandir
  let cleanedQuery = originalQuery;
  const problematicTerms = ['GT', 'game', 'gaming', 'gamer'];
  
  problematicTerms.forEach(term => {
    if (cleanedQuery.includes(term) && !cleanedQuery.toLowerCase().includes('guatemala')) {
      cleanedQuery = cleanedQuery.replace(new RegExp(`\\b${term}\\b`, 'gi'), '');
      console.log(`üßπ Removido t√©rmino problem√°tico: "${term}" ‚Üí "${cleanedQuery}"`);
    }
  });
  
  // Para queries simples, agregar solo variaciones l√≥gicas
  const words = cleanedQuery.split(' ').filter(word => word.length > 2);
  if (words.length === 1) {
    const word = words[0].toLowerCase();
    // Solo agregar "guatemala" si no es obvio que ya es guatemalteco
    const needsContext = !['guatemala', 'guate', 'chapin', 'gt'].some(geoTerm => 
      cleanedQuery.toLowerCase().includes(geoTerm)
    );
    
    if (needsContext) {
      const contextualQuery = `${cleanedQuery} OR ${cleanedQuery} guatemala`;
      console.log(`üìç Agregando contexto guatemalteco: "${cleanedQuery}" ‚Üí "${contextualQuery}"`);
      return contextualQuery;
    }
  }

  // Si no necesita expansi√≥n, usar query limpia
  console.log(`‚úÖ Query final: "${cleanedQuery}"`);
  // NUEVO: Para consultas con m√∫ltiples t√©rminos (>1 palabra) sin operadores OR,
  // convertir la b√∫squeda a un formato "palabra OR palabra" para imitar el
  // comportamiento palabra-por-palabra usado en la rutina de trending. Esto
  // incrementa la cobertura cuando el usuario env√≠a frases largas.

  const tokens = cleanedQuery.split(/\s+/).filter(w => w.length > 2 && !w.startsWith('#'));

  if (tokens.length > 1 && !cleanedQuery.includes(' OR ')) {
    const orQuery = tokens.join(' OR ');
    const finalOrQuery = `${orQuery} Guatemala`;
    console.log(`üîÄ Query convertida a formato OR palabra-por-palabra: "${finalOrQuery}"`);
    return finalOrQuery.trim();
  }

  return cleanedQuery.trim() || originalQuery;
}

/**
 * Optimiza l√≠mites de tweets basado en el tipo de consulta
 */
function optimizeTweetLimit(query, requestedLimit = 10) {
  const query_lower = query.toLowerCase();
  
  // Para an√°lisis de sentimiento o temas controversiales, usar m√°s tweets
  const needMoreTweets = [
    'sentimiento', 'opinion', 'que dicen', 'que piensan', 'reaccion',
    'politica', 'elecciones', 'gobierno', 'presidente', 'congreso',
    'protestas', 'marchas', 'manifestacion', 'crisis'
  ];
  
  if (needMoreTweets.some(term => query_lower.includes(term))) {
    return Math.max(requestedLimit, 20); // M√≠nimo 20 tweets para an√°lisis completo
  }
  
  // Para consultas espec√≠ficas, 15 tweets es suficiente
  return Math.max(requestedLimit, 15);
}

// Registro de herramientas disponibles
const AVAILABLE_TOOLS = {
  nitter_context: {
    name: 'nitter_context',
    description: 'Obtiene tweets usando Nitter, los analiza con Gemini AI (sentimiento, intenci√≥n, entidades) y los guarda en la base de datos',
    parameters: {
      q: {
        type: 'string',
        required: true,
        description: 'T√©rmino de b√∫squeda para obtener tweets contextuales'
      },
      location: {
        type: 'string',
        required: false,
        default: 'guatemala',
        description: 'Ubicaci√≥n para filtrar resultados (guatemala, mexico, us, etc.)'
      },
      limit: {
        type: 'integer',
        required: false,
        default: 10,
        min: 5,
        max: 50,
        description: 'N√∫mero m√°ximo de tweets a obtener'
      },
      session_id: {
        type: 'string',
        required: false,
        description: 'ID de sesi√≥n del chat (se genera autom√°ticamente si no se proporciona)'
      }
    },
    service_endpoint: '/api/nitter_context',
    service_url: 'internal',
    category: 'social_media_analysis',
    usage_credits: 5,
    features: [
      'Extracci√≥n de tweets con Nitter',
      'An√°lisis de sentimiento con Gemini AI',
      'Detecci√≥n de intenci√≥n comunicativa',
      'Extracci√≥n de entidades mencionadas',
      'Guardado individual en base de datos',
      'Categorizaci√≥n autom√°tica'
    ]
  },
  
  perplexity_search: {
    name: 'perplexity_search',
    description: 'Realiza b√∫squedas web inteligentes usando Perplexity AI para obtener informaci√≥n actualizada y contextualizada sobre cualquier tema',
    parameters: {
      query: {
        type: 'string',
        required: true,
        description: 'Consulta de b√∫squeda web para investigar'
      },
      location: {
        type: 'string',
        required: false,
        default: 'Guatemala',
        description: 'Contexto geogr√°fico para la b√∫squeda (Guatemala, Mexico, etc.)'
      },
      focus: {
        type: 'string',
        required: false,
        default: 'general',
        description: 'Enfoque espec√≠fico: general, noticias, eventos, deportes, politica, economia, cultura'
      },
      improve_nitter_search: {
        type: 'boolean',
        required: false,
        default: false,
        description: 'Si true, adem√°s de la b√∫squeda web, optimiza t√©rminos para mejorar b√∫squedas en Nitter'
      }
    },
    service_endpoint: '/api/perplexity_search', 
    service_url: 'internal',
    category: 'web_research',
    usage_credits: 3,
    features: [
      'B√∫squeda web en tiempo real',
      'Informaci√≥n contextualizada por ubicaci√≥n',
      'An√°lisis de eventos actuales',
      'Optimizaci√≥n de t√©rminos para redes sociales',
      'Detecci√≥n de hashtags relevantes',
      'Contexto guatemalteco especializado'
    ]
  },
  
  user_projects: {
    name: 'user_projects',
    description: 'Obtiene los proyectos del usuario autenticado con estad√≠sticas y metadatos completos',
    parameters: {
      limit: {
        type: 'integer',
        required: false,
        default: 20,
        min: 1,
        max: 100,
        description: 'N√∫mero m√°ximo de proyectos a obtener'
      },
      status: {
        type: 'string',
        required: false,
        description: 'Filtrar por estado espec√≠fico: active, completed, paused, planning'
      },
      priority: {
        type: 'string',
        required: false,
        description: 'Filtrar por prioridad: high, medium, low'
      }
    },
    service_endpoint: '/api/user_projects',
    service_url: 'internal',
    category: 'user_data',
    usage_credits: 1,
    features: [
      'Lista proyectos del usuario autenticado',
      'Incluye estad√≠sticas (decisiones, assets)',
      'Metadatos completos (fechas, prioridad, tags)',
      'Filtros por estado y prioridad',
      'Informaci√≥n de progreso y sugerencias'
    ]
  },
  
  user_codex: {
    name: 'user_codex',
    description: 'Accede al Codex personal del usuario: documentos, transcripciones, an√°lisis y assets de proyectos',
    parameters: {
      project_id: {
        type: 'string',
        required: false,
        description: 'ID del proyecto espec√≠fico para filtrar items'
      },
      query: {
        type: 'string',
        required: false,
        description: 'B√∫squeda en t√≠tulo, contenido o transcripciones'
      },
      limit: {
        type: 'integer',
        required: false,
        default: 20,
        min: 1,
        max: 50,
        description: 'N√∫mero m√°ximo de items a obtener'
      },
      type: {
        type: 'string',
        required: false,
        description: 'Filtrar por tipo: document, audio, video, image, note'
      },
      tags: {
        type: 'array',
        required: false,
        description: 'Filtrar por tags espec√≠ficos (array de strings)',
        items: {
          type: 'string'
        }
      }
    },
    service_endpoint: '/api/user_codex',
    service_url: 'internal',
    category: 'user_data',
    usage_credits: 1,
    features: [
      'Acceso completo al Codex personal',
      'B√∫squeda inteligente en contenido y transcripciones',
      'Filtros por proyecto, tipo y tags',
      'Incluye an√°lisis de documentos y transcripciones de audio',
      'Metadatos de archivos y relaciones con proyectos'
    ]
  },
  
  nitter_profile: {
    name: 'nitter_profile',
    description: 'Obtiene tweets recientes de un usuario espec√≠fico usando Nitter, ideal para analizar la actividad de cuentas institucionales, pol√≠ticos, influencers y personas p√∫blicas de Guatemala',
    parameters: {
      username: {
        type: 'string',
        description: 'Nombre de usuario de Twitter sin el @, por ejemplo: "GuatemalaGob", "elonmusk", "CashLuna"',
        required: true
      },
      limit: {
        type: 'number',
        description: 'N√∫mero m√°ximo de tweets a obtener del usuario',
        min: 5,
        max: 20,
        default: 10
      },
      include_retweets: {
        type: 'boolean',
        description: 'Incluir retweets del usuario en los resultados',
        default: false
      },
      include_replies: {
        type: 'boolean',
        description: 'Incluir replies del usuario en los resultados',
        default: false
      }
    },
    category: 'social_media',
    examples: [
      'Busca los √∫ltimos tweets de @GuatemalaGob',
      'Que dice @CashLuna en sus tweets recientes',
      'Analiza la actividad de @MPguatemala'
    ]
  },
  
  project_decisions: {
    name: 'project_decisions',
    description: 'Obtiene todas las decisiones de un proyecto espec√≠fico con detalles completos de cada capa (enfoque, alcance, configuraci√≥n)',
    parameters: {
      project_id: {
        type: 'string',
        required: true,
        description: 'ID del proyecto para obtener sus decisiones'
      }
    },
    service_endpoint: '/api/project_decisions',
    service_url: 'internal',
    category: 'user_data',
    usage_credits: 1,
    features: [
      'Acceso completo a decisiones por capas',
      'Detalles de enfoque, alcance y configuraci√≥n',
      'Informaci√≥n de objetivos y pr√≥ximos pasos',
      'Fechas l√≠mite y metodolog√≠as',
      'Referencias y fuentes de datos',
      'Hist√≥rico ordenado por fecha de creaci√≥n'
    ]
  },
  
  resolve_twitter_handle: {
    name: 'resolve_twitter_handle',
    description: 'Resuelve nombres de personas a sus handles de Twitter/X usando b√∫squeda din√°mica con GPT-4o y guardado autom√°tico en PulsePolitics',
    parameters: {
      name: {
        type: 'string',
        required: true,
        description: 'Nombre de la persona a buscar (ej: "Bernardo Ar√©valo", "Sandra Torres")'
      },
      context: {
        type: 'string',
        required: false,
        description: 'Contexto adicional sobre la persona (cargo, instituci√≥n, etc.)'
      },
      sector: {
        type: 'string',
        required: false,
        description: 'Sector espec√≠fico: gobierno, politica, medios, deportes, etc.'
      }
    },
    service_endpoint: '/api/resolve_twitter_handle',
    service_url: 'internal',
    category: 'social_media',
    usage_credits: 2,
    features: [
      'B√∫squeda 100% din√°mica - sin usuarios hardcodeados',
      'Resoluci√≥n inteligente usando GPT-4o con conocimiento actualizado y mayor precisi√≥n',
      'Guardado autom√°tico de handles resueltos en PulsePolitics',
      'Contexto guatemalteco especializado con casos espec√≠ficos',
      'Aprendizaje continuo mediante almacenamiento de descubrimientos',
      'Base de conocimiento que crece autom√°ticamente'
    ]
  }
};

/**
 * Lista todas las herramientas disponibles en el MCP Server
 * @returns {Array} Array de herramientas con su informaci√≥n
 */
async function listAvailableTools() {
  try {
    const tools = Object.values(AVAILABLE_TOOLS).map(tool => ({
      name: tool.name,
      description: tool.description,
      category: tool.category,
      parameters: tool.parameters,
      usage_credits: tool.usage_credits
    }));

    console.log(`üìã Listando ${tools.length} herramientas MCP disponibles`);
    return tools;
  } catch (error) {
    console.error('‚ùå Error listando herramientas MCP:', error);
    throw error;
  }
}

/**
 * Obtiene informaci√≥n detallada de una herramienta espec√≠fica
 * @param {string} toolName - Nombre de la herramienta
 * @returns {Object|null} Informaci√≥n de la herramienta o null si no existe
 */
async function getToolInfo(toolName) {
  try {
    const tool = AVAILABLE_TOOLS[toolName];
    
    if (!tool) {
      console.log(`‚ö†Ô∏è Herramienta '${toolName}' no encontrada`);
      return null;
    }

    console.log(`üìñ Obteniendo informaci√≥n de herramienta: ${toolName}`);
    return {
      name: tool.name,
      description: tool.description,
      category: tool.category,
      parameters: tool.parameters,
      usage_credits: tool.usage_credits,
      service_info: {
        endpoint: tool.service_endpoint,
        url: tool.service_url
      }
    };
  } catch (error) {
    console.error(`‚ùå Error obteniendo info de herramienta ${toolName}:`, error);
    throw error;
  }
}

/**
 * Ejecuta una herramienta espec√≠fica del MCP Server
 * @param {string} toolName - Nombre de la herramienta
 * @param {Object} parameters - Par√°metros para la herramienta
 * @param {Object} user - Informaci√≥n del usuario autenticado
 * @returns {Object} Resultado de la ejecuci√≥n
 */
async function executeTool(toolName, parameters = {}, user = null) {
  try {
    console.log(`üîß Ejecutando herramienta MCP: ${toolName}`);
    
    // Validar que la herramienta existe
    if (!AVAILABLE_TOOLS[toolName]) {
      throw new Error(`Herramienta '${toolName}' no encontrada. Herramientas disponibles: ${Object.keys(AVAILABLE_TOOLS).join(', ')}`);
    }
    
    // Ejecutar herramienta espec√≠fica
    switch (toolName) {
      case 'nitter_context':
        return await executeNitterContext(
          parameters.q, 
          parameters.location || 'guatemala', 
          parameters.limit || 10,
          parameters.session_id,
          user
        );
      case 'perplexity_search':
        return await executePerplexitySearch(
          parameters.query,
          parameters.location || 'Guatemala',
          parameters.focus || 'general',
          parameters.improve_nitter_search || false,
          user
        );
      case 'user_projects':
        return await executeUserProjects(
          parameters.limit || 20,
          parameters.status,
          parameters.priority,
          user
        );
      case 'user_codex':
        return await executeUserCodex(
          parameters.project_id,
          parameters.query,
          parameters.limit || 20,
          parameters.type,
          parameters.tags,
          user
        );
      case 'nitter_profile':
        const { username, limit, include_retweets, include_replies } = parameters;
        
        if (!username || typeof username !== 'string') {
          throw new Error('El par√°metro username es requerido y debe ser un string');
        }
        
        return await executeNitterProfile(
          username.trim(),
          limit || 10,
          include_retweets || false,
          include_replies || false,
          user
        );
      case 'project_decisions':
        return await executeProjectDecisions(
          parameters.project_id,
          user
        );
      case 'resolve_twitter_handle':
        return await executeResolveTwitterHandle(
          parameters.name,
          parameters.context || '',
          parameters.sector || '',
          user
        );
      default:
        throw new Error(`Ejecutor no implementado para herramienta: ${toolName}`);
    }
  } catch (error) {
    console.error(`‚ùå Error ejecutando herramienta ${toolName}:`, error);
    throw error;
  }
}

/**
 * Funci√≥n para optimizar t√©rminos de b√∫squeda con DeepSeek ANTES de buscar
 * @param {string} originalQuery - Consulta original del usuario
 * @param {string} location - Ubicaci√≥n geogr√°fica
 * @param {Object} user - Usuario autenticado
 * @returns {Object} T√©rminos optimizados por DeepSeek
 */
async function optimizeSearchWithDeepSeek(originalQuery, location, user) {
  try {
    console.log('üß† Optimizando b√∫squeda con DeepSeek antes de ejecutar...');
    
    const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY;
    
    if (!DEEPSEEK_API_KEY) {
      console.log('‚ö†Ô∏è DEEPSEEK_API_KEY no configurada, usando t√©rminos est√°ndar');
      return {
        optimized: false,
        final_query: originalQuery,
        strategy: 'standard_expansion'
      };
    }

    const now = new Date();
    const currentMonth = now.toLocaleString('es-ES', { month: 'long' });
    const currentYear = now.getFullYear();

    const deepSeekPrompt = `Optimiza esta consulta para encontrar tweets REALES en redes sociales guatemaltecas.

CONSULTA: "${originalQuery}"
UBICACI√ìN: ${location}
FECHA: ${currentMonth} ${currentYear}

INSTRUCCIONES:
1. Analiza qu√© busca el usuario
2. Genera t√©rminos que la gente REALMENTE usa en Twitter
3. Incluye hashtags y variaciones populares
4. Considera el contexto guatemalteco actual

EJEMPLOS DE OPTIMIZACI√ìN CORRECTA:
- "disturbios Izabal miner√≠a" ‚Üí "izabal OR miner√≠a OR protestas OR manifestaciones OR mina OR resistencia"
- "elecciones guatemala" ‚Üí "elecciones OR electoral OR voto OR tse OR bernardo OR arevalo"
- "orgullo guatemala" ‚Üí "orgullo OR pride OR lgbt OR diversidad OR marcha OR #orgullogt"

RESPONDE SOLO EN JSON:
{
  "razonamiento": "an√°lisis breve de por qu√© optimizar",
  "consulta_optimizada": "t√©rminos OR reales OR que OR usan",
  "hashtags_incluidos": ["#hashtag1"],
  "estrategia_aplicada": "estrategia usada",
  "probabilidad_exito": "alta|media|baja",
  "terminos_clave_agregados": ["t√©rmino1"],
  "justificacion": "por qu√© estos t√©rminos funcionan mejor"
}

Usa SOLO t√©rminos que realmente se usan en redes sociales guatemaltecas.`;

    const response = await fetch('https://api.deepseek.com/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${DEEPSEEK_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'deepseek-reasoner',
        messages: [
          {
            role: 'system',
            content: 'Eres DeepSeek, un modelo de razonamiento avanzado especializado en optimizaci√≥n de b√∫squedas para redes sociales. Tu fortaleza es analizar consultas y generar t√©rminos de b√∫squeda que maximicen las posibilidades de encontrar contenido relevante.'
          },
          {
            role: 'user',
            content: deepSeekPrompt
          }
        ],
        temperature: 0.3,
        max_tokens: 1000
      })
    });

    if (!response.ok) {
      console.log(`‚ö†Ô∏è Error llamando a DeepSeek: ${response.status}`);
      return {
        optimized: false,
        final_query: originalQuery,
        strategy: 'standard_expansion',
        error: `DeepSeek API error: ${response.status}`
      };
    }

    const data = await response.json();
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message || !data.choices[0].message.content) {
      console.log('‚ö†Ô∏è Respuesta de DeepSeek incompleta, usando expansi√≥n est√°ndar');
      return {
        optimized: false,
        final_query: originalQuery,
        strategy: 'standard_expansion',
        error: 'DeepSeek response incomplete'
      };
    }

    const rawContent = data.choices[0].message.content.trim();
    
    let optimization;
    try {
      optimization = JSON.parse(rawContent);
    } catch (parseError) {
      // Intentar extraer JSON si est√° envuelto en otros caracteres
      const jsonMatch = rawContent.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        try {
          optimization = JSON.parse(jsonMatch[0]);
          console.log('‚úÖ DeepSeek JSON extra√≠do exitosamente');
        } catch (secondError) {
          console.log('‚ö†Ô∏è DeepSeek fall√≥, usando expansi√≥n est√°ndar');
          return {
            optimized: false,
            final_query: originalQuery,
            strategy: 'standard_expansion',
            error: `JSON parse error: ${parseError.message}`
          };
        }
      } else {
        console.log('‚ö†Ô∏è DeepSeek no devolvi√≥ JSON v√°lido, usando expansi√≥n est√°ndar');
        return {
          optimized: false,
          final_query: originalQuery,
          strategy: 'standard_expansion',
          error: `No JSON found in response`
        };
      }
    }
    
    console.log(`‚úÖ DeepSeek optimiz√≥: "${originalQuery}" ‚Üí "${optimization.consulta_optimizada}"`);
    console.log(`üéØ Estrategia: ${optimization.estrategia_aplicada}`);
    console.log(`üìä Probabilidad de √©xito: ${optimization.probabilidad_exito}`);
    
    return {
      optimized: true,
      original_query: originalQuery,
      final_query: optimization.consulta_optimizada,
      strategy: optimization.estrategia_aplicada,
      hashtags_included: optimization.hashtags_incluidos,
      key_terms_added: optimization.terminos_clave_agregados,
      success_probability: optimization.probabilidad_exito,
      reasoning: optimization.razonamiento,
      justification: optimization.justificacion
    };

  } catch (error) {
    console.error('‚ùå Error en optimizaci√≥n DeepSeek:', error);
    return {
      optimized: false,
      final_query: originalQuery,
      strategy: 'standard_expansion',
      error: error.message
    };
  }
}

/**
 * Ejecuta espec√≠ficamente la herramienta nitter_context para obtener tweets contextuales
 * @param {string} query - Consulta de b√∫squeda
 * @param {string} location - Ubicaci√≥n geogr√°fica
 * @param {number} limit - L√≠mite de tweets
 * @param {string} sessionId - ID de sesi√≥n
 * @param {Object} user - Informaci√≥n del usuario
 * @returns {Object} Resultado de la b√∫squeda de tweets contextuales
 */
async function executeNitterContext(query, location = 'guatemala', limit = 10, sessionId = null, user = null) {
  try {
    console.log(`üê¶ Ejecutando nitter_context MCP: query="${query}", location="${location}", limit=${limit}`);
    
    if (!user || !user.id) {
      throw new Error('Usuario autenticado requerido para ejecutar nitter_context');
    }
    
    // DETECCI√ìN DE QUERY OPTIMIZADA POR LLM (Laura)
    // Si la query contiene hashtags, emojis o jerga espec√≠fica, es de Laura y NO debe modificarse
    const isLLMOptimized = query.includes('#') || 
                          /\sOR\s/i.test(query) ||
                          query.includes('‚öΩ') || 
                          query.includes('chapin') || 
                          query.includes('guate') ||
                          query.includes('crema') ||
                          query.includes('rojo') ||
                          /[üéØüèÜ‚öΩüèÄüéæü•Ö]/g.test(query);
    
    let finalQuery;
    const optimizedLimit = optimizeTweetLimit(query, limit);
    
    if (isLLMOptimized) {
      // La query viene con hashtags/jerga (optimizada por LLM), pero si contiene
      // varias palabras separadas por espacios **y** no contiene operadores
      // OR, la convertimos a formato "palabra OR palabra" para imitar la
      // b√∫squeda palabra-por-palabra que usa el proceso de trending.

      const containsOR = /\sOR\s/i.test(query);
      const rawTokens = query.split(/\s+/).filter(t => t.length > 1);
      const meaningfulTokens = rawTokens.filter(t => !t.startsWith('#'));

      if (!containsOR && meaningfulTokens.length > 1) {
        const orQuery = meaningfulTokens.join(' OR ');
        // Mantener hashtags al final para no perder contexto viral
        const hashtags = rawTokens.filter(t => t.startsWith('#')).join(' ');
        finalQuery = `${orQuery} Guatemala ${hashtags}`.trim();
        console.log(`üîÄ Query LLM optimizada convertida a OR palabra-por-palabra: "${finalQuery}"`);
      } else {
        // Sin modificaci√≥n si ya contiene OR o es t√©rmino √∫nico
        finalQuery = query;
        console.log(`üß† Query optimizada por LLM preservada: "${finalQuery}"`);
      }
    } else {
      // SOLO PARA QUERIES SIMPLES: aplicar expansi√≥n est√°ndar
      console.log(`üîß Query simple detectada - aplicando expansi√≥n est√°ndar`);
      
      // Desactivar completamente la optimizaci√≥n con DeepSeek para queries simples tambi√©n
      const deepSeekOptimization = {
        optimized: false,
        final_query: query,
        strategy: 'disabled',
        reasoning: null,
        success_probability: null
      };
      
      // PASO 2: EXPANSI√ìN EST√ÅNDAR como backup
      const standardExpansion = expandSearchTerms(query);
      
      // Decidir qu√© query usar: DeepSeek si est√° optimizada, sino expansi√≥n est√°ndar
      finalQuery = deepSeekOptimization.optimized ? 
        deepSeekOptimization.final_query : 
        standardExpansion;
      
      console.log(`üéØ Query original: "${query}"`);
      if (deepSeekOptimization.optimized) {
        console.log(`üß† Query optimizada por DeepSeek: "${finalQuery}"`);
        console.log(`üìã Estrategia aplicada: ${deepSeekOptimization.strategy}`);
        console.log(`üé≤ Probabilidad de √©xito: ${deepSeekOptimization.success_probability}`);
      } else {
        console.log(`üöÄ Query expandida est√°ndar: "${finalQuery}"`);
      }
    }
    
    console.log(`üìä L√≠mite optimizado: ${optimizedLimit} tweets`);
    
    // Generar session_id si no se proporciona
    const finalSessionId = sessionId || `mcp_session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    // PASO 3: EJECUTAR B√öSQUEDA CON T√âRMINOS OPTIMIZADOS
    const result = await processNitterContext(
      finalQuery, // Usar la query optimizada por DeepSeek
      user.id,
      finalSessionId,
      location,
      optimizedLimit
    );

    if (result.success) {
      console.log(`‚úÖ Nitter context procesado exitosamente: ${result.data.tweets_found} tweets analizados`);
      
      // Formatear respuesta para el agente AI con informaci√≥n adicional sobre la optimizaci√≥n
      const formattedTweets = result.data.tweets.map(tweet => 
        `@${tweet.usuario} (${tweet.fecha_tweet}): ${tweet.texto}\n` +
        `   üìä Sentimiento: ${tweet.sentimiento} (${tweet.score_sentimiento}) | ` +
        `Intenci√≥n: ${tweet.intencion_comunicativa}\n` +
        `   üí¨ Engagement: ‚ù§Ô∏è${tweet.likes} üîÑ${tweet.retweets} üí¨${tweet.replies} | ` +
        `Entidades: ${tweet.entidades_mencionadas.length}\n`
      ).join('\n');
      
      return {
        success: true,
        tweets: result.data.tweets,
        tweets_found: result.data.tweets_found,
        query_original: query,
        query_final: finalQuery,
        optimization_applied: !isLLMOptimized,
        llm_optimized: isLLMOptimized,
        deepseek_strategy: isLLMOptimized ? 'llm_preserved' : 'standard_expansion',
        deepseek_reasoning: isLLMOptimized ? 'Query optimizada por LLM preservada sin modificaciones' : 'Query expandida con m√©todo est√°ndar',
        success_probability: isLLMOptimized ? 'alta' : 'media',
        limit_requested: limit,
        limit_used: optimizedLimit,
        session_id: finalSessionId,
        formatted_context: `B√öSQUEDA INTELIGENTE CON PRESERVACI√ìN LLM:
Query original del usuario: "${query}"
${isLLMOptimized ? 
  `üß† Query optimizada por LLM PRESERVADA: "${finalQuery}"
üìã Estrategia aplicada: preservaci√≥n_inteligente
üéØ Razonamiento: Laura detect√≥ y optimiz√≥ la query con jerga, hashtags y contexto espec√≠fico
üìä Probabilidad de √©xito estimada: alta (query pre-optimizada por IA)
üè∑Ô∏è Elementos detectados: ${query.includes('#') ? 'hashtags' : ''}${query.includes('chapin') || query.includes('guate') ? ', jerga guatemalteca' : ''}${/[üéØüèÜ‚öΩüèÄüéæü•Ö]/g.test(query) ? ', emojis contextuales' : ''}` :
  `üöÄ Query expandida est√°ndar: "${finalQuery}" (sin optimizaci√≥n LLM previa)`}
Tweets analizados: ${result.data.tweets_found}/${optimizedLimit}
Ubicaci√≥n: ${location}

TWEETS ENCONTRADOS Y ANALIZADOS:
${formattedTweets}

AN√ÅLISIS CONTEXTUAL:
${isLLMOptimized ? 
  `- Laura (LLM) pre-optimiz√≥ la query con jerga y hashtags guatemaltecos
- Se preserv√≥ la optimizaci√≥n inteligente sin modificaciones adicionales
- Query contiene elementos espec√≠ficos de redes sociales guatemaltecas` :
  `- Se expandi√≥ autom√°ticamente la consulta con m√©todos est√°ndar`}
- Se optimiz√≥ el l√≠mite basado en el tipo de an√°lisis requerido
- Todos los tweets incluyen an√°lisis de sentimiento e intenci√≥n comunicativa
- Las entidades mencionadas han sido extra√≠das autom√°ticamente`,
        analysis_metadata: {
          deepseek_optimization: false,
          llm_optimization: isLLMOptimized,
          optimization_strategy: isLLMOptimized ? 'llm_preserved' : 'standard_expansion',
          original_vs_optimized: isLLMOptimized,
          limit_optimization_applied: optimizedLimit !== limit,
          tweets_analyzed: result.data.tweets_found,
          sentiment_distribution: result.data.tweets.reduce((acc, tweet) => {
            acc[tweet.sentimiento] = (acc[tweet.sentimiento] || 0) + 1;
            return acc;
          }, {}),
          average_engagement: result.data.tweets.reduce((sum, tweet) => 
            sum + (tweet.likes || 0) + (tweet.retweets || 0) + (tweet.replies || 0), 0
          ) / result.data.tweets.length || 0
        }
      };
    } else {
      throw new Error(result.error || 'Error procesando nitter_context');
    }

  } catch (error) {
    console.error(`‚ùå Error ejecutando nitter_context MCP:`, error);
    throw error;
  }
}

/**
 * Ejecuta espec√≠ficamente la herramienta perplexity_search para b√∫squedas web inteligentes
 * @param {string} query - Consulta de b√∫squeda web
 * @param {string} location - Contexto geogr√°fico
 * @param {string} focus - Enfoque espec√≠fico de la b√∫squeda
 * @param {boolean} improveNitterSearch - Si tambi√©n generar t√©rminos optimizados para Nitter
 * @param {Object} user - Usuario autenticado
 * @returns {Object} Resultado de la b√∫squeda web con Perplexity
 */
async function executePerplexitySearch(query, location = 'Guatemala', focus = 'general', improveNitterSearch = false, user = null) {
  try {
    console.log(`üîç Ejecutando perplexity_search MCP: query="${query}", location="${location}", focus="${focus}", improveNitter=${improveNitterSearch}`);
    
    if (!user || !user.id) {
      throw new Error('Usuario autenticado requerido para ejecutar perplexity_search');
    }

    // Importar el servicio de Perplexity 
    const perplexityService = require('./perplexity');
    
    // Obtener fecha actual para contexto temporal
    const now = new Date();
    const currentYear = now.getFullYear();
    const currentMonth = now.toLocaleString('es-ES', { month: 'long' });
    const currentDate = now.toLocaleDateString('es-ES', { day: 'numeric', month: 'long', year: 'numeric' });
    
         // Construir consulta optimizada basada en el enfoque - SIEMPRE CON FILTRO TEMPORAL
     let optimizedQuery = query;
     let searchContext = '';
     
     // FILTRO TEMPORAL OBLIGATORIO: Agregar contexto temporal actual SIEMPRE
     const temporalContext = `${currentMonth} ${currentYear} actual reciente`;
     
     switch (focus) {
       case 'noticias':
         optimizedQuery = `${query} noticias ${location} ${temporalContext} √∫ltimas`;
         searchContext = `noticias actuales y eventos recientes de ${currentMonth} ${currentYear}`;
         break;
       case 'eventos':
         optimizedQuery = `${query} eventos ${location} ${temporalContext} pr√≥ximos`;
         searchContext = `eventos y actividades actuales de ${currentMonth} ${currentYear}`;
         break;
       case 'deportes':
         optimizedQuery = `${query} deportes ${location} ${temporalContext} temporada`;
         searchContext = `deportes y competencias actuales de ${currentMonth} ${currentYear}`;
         break;
       case 'politica':
         optimizedQuery = `${query} pol√≠tica ${location} ${temporalContext} gobierno`;
         searchContext = `pol√≠tica y gobierno actual de ${currentMonth} ${currentYear}`;
         break;
       case 'economia':
         optimizedQuery = `${query} econom√≠a ${location} ${temporalContext} √∫ltimas cifras`;
         searchContext = `econom√≠a y finanzas actuales de ${currentMonth} ${currentYear}`;
         break;
       case 'cultura':
         optimizedQuery = `${query} cultura ${location} ${temporalContext} entretenimiento`;
         searchContext = `cultura y entretenimiento actual de ${currentMonth} ${currentYear}`;
         break;
       default:
         optimizedQuery = `${query} ${location} ${temporalContext} informaci√≥n`;
         searchContext = `informaci√≥n general actualizada de ${currentMonth} ${currentYear}`;
     }

    console.log(`üéØ Consulta optimizada: "${optimizedQuery}"`);
    
         // Preparar prompt especializado para b√∫squedas web generales - CON ENFOQUE TEMPORAL
     const webSearchPrompt = `Analiza la consulta "${query}" y proporciona informaci√≥n completa y ACTUALIZADA.

**FECHA ACTUAL: ${currentDate}**
**CONTEXTO TEMPORAL: ${currentMonth} ${currentYear}**
**CONTEXTO GEOGR√ÅFICO: ${location}**
**ENFOQUE: ${searchContext}**

‚ö†Ô∏è CR√çTICO - FILTRO TEMPORAL:
- SOLO busca informaci√≥n de ${currentMonth} ${currentYear} o MUY RECIENTE
- NO incluyas informaci√≥n hist√≥rica o de a√±os anteriores
- Prioriza eventos, noticias y desarrollos ACTUALES
- Si no hay informaci√≥n reciente, especifica claramente que no hay datos actuales

INSTRUCCIONES ESPEC√çFICAS:
1. Busca informaci√≥n ACTUALIZADA sobre "${query}" en el contexto de ${location} para ${currentMonth} ${currentYear}
2. Enf√≥cate espec√≠ficamente en ${searchContext}
3. Proporciona datos concretos de ${currentMonth} ${currentYear}, fechas espec√≠ficas recientes
4. Si es sobre personas, incluye informaci√≥n biogr√°fica Y SU ESTADO ACTUAL en ${currentYear}
5. Si es sobre eventos, incluye SOLO eventos de ${currentMonth} ${currentYear} o pr√≥ximos
6. Si es sobre temas actuales, incluye desarrollos de ${currentMonth} ${currentYear}
7. Contextualiza la informaci√≥n para el p√∫blico de ${location} CON ENFOQUE EN LO ACTUAL
8. RECHAZA informaci√≥n obsoleta o de fechas anteriores a ${currentYear}

${improveNitterSearch ? `
ADICIONAL - OPTIMIZACI√ìN PARA REDES SOCIALES:
- Tambi√©n sugiere hashtags relevantes que podr√≠an estar trending
- Identifica t√©rminos de b√∫squeda alternativos para redes sociales
- Incluye variaciones de nombres o eventos que podr√≠an usarse en Twitter/X
` : ''}

Responde en formato JSON estructurado:
{
  "consulta_original": "${query}",
  "consulta_optimizada": "${optimizedQuery}",
  "informacion_principal": "Informaci√≥n principal encontrada",
  "contexto_local": "Relevancia espec√≠fica para ${location}",
  "datos_clave": ["dato1", "dato2", "dato3"],
  "fechas_relevantes": "Fechas importantes relacionadas",
  "fuentes_sugeridas": ["fuente1", "fuente2"],
  ${improveNitterSearch ? `
  "optimizacion_redes_sociales": {
    "hashtags_sugeridos": ["#hashtag1", "#hashtag2"],
    "terminos_alternativos": ["termino1", "termino2"],
    "busqueda_nitter_optimizada": "t√©rminos OR optimizados OR para OR twitter"
  },` : ''}
  "relevancia": "alta|media|baja",
  "categoria": "noticias|eventos|deportes|politica|economia|cultura|general"
}`;

    // Ejecutar b√∫squeda con Perplexity
    const PERPLEXITY_API_KEY = process.env.PERPLEXITY_API_KEY;
    
    if (!PERPLEXITY_API_KEY) {
      throw new Error('PERPLEXITY_API_KEY no configurada');
    }

    const payload = {
      model: 'sonar',
      messages: [
                 {
           role: 'system',
           content: `Eres un asistente de investigaci√≥n especializado en b√∫squedas web inteligentes para ${location}.

Tu trabajo es encontrar informaci√≥n ACTUALIZADA, precisa y contextualizada sobre cualquier tema consultado.

**FECHA ACTUAL: ${currentDate}**
**CONTEXTO TEMPORAL OBLIGATORIO: ${currentMonth} ${currentYear}**
**UBICACI√ìN: ${location}**

CARACTER√çSTICAS CR√çTICAS:
- SIEMPRE busca informaci√≥n de ${currentMonth} ${currentYear} o MUY RECIENTE
- RECHAZA autom√°ticamente informaci√≥n hist√≥rica o obsoleta
- Contextualiza ESPEC√çFICAMENTE para el p√∫blico de ${location}
- Proporciona datos espec√≠ficos CON FECHAS DE ${currentYear}
- Identifica fuentes confiables Y ACTUALES
- Analiza relevancia local vs global CON ENFOQUE EN LO ACTUAL
- Sugiere t√©rminos relacionados para b√∫squedas adicionales ACTUALES

FILTROS TEMPORALES ESTRICTOS:
- NO uses informaci√≥n de a√±os anteriores a ${currentYear}
- Prioriza eventos de ${currentMonth} ${currentYear}
- Si no hay informaci√≥n actual, dilo expl√≠citamente
- Enf√≥cate en desarrollos, noticias y eventos RECIENTES

Enf√≥cate EXCLUSIVAMENTE en informaci√≥n actual, relevante y verificable de ${currentMonth} ${currentYear}.`
         },
        {
          role: 'user',
          content: webSearchPrompt
        }
      ],
      search_context: {
        search_queries: [optimizedQuery, query + ' ' + location, query + ' ' + currentMonth + ' ' + currentYear]
      },
      temperature: 0.3,
      max_tokens: 800
    };

    console.log(`üì° Realizando b√∫squeda web con Perplexity...`);
    
    const response = await fetch('https://api.perplexity.ai/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${PERPLEXITY_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      throw new Error(`Error en API de Perplexity: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      throw new Error('Respuesta inv√°lida de Perplexity API');
    }

    let rawResponse = data.choices[0].message.content;
    console.log(`‚úÖ Respuesta recibida de Perplexity para: "${query}"`);
    
    // Intentar extraer JSON de la respuesta
    let parsedResult = null;
    try {
      const jsonMatch = rawResponse.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        parsedResult = JSON.parse(jsonMatch[0]);
      }
    } catch (parseError) {
      console.log(`‚ö†Ô∏è No se pudo parsear JSON, usando respuesta raw`);
    }

    // Optimizar t√©rminos para Nitter si se solicit√≥
    let nitterOptimization = null;
    if (improveNitterSearch && parsedResult?.optimizacion_redes_sociales?.busqueda_nitter_optimizada) {
      nitterOptimization = {
        original_query: query,
        optimized_query: parsedResult.optimizacion_redes_sociales.busqueda_nitter_optimizada,
        suggested_hashtags: parsedResult.optimizacion_redes_sociales.hashtags_sugeridos || [],
        alternative_terms: parsedResult.optimizacion_redes_sociales.terminos_alternativos || []
      };
    }

    // Formatear respuesta para el agente AI
    const formattedResponse = parsedResult ? 
      `B√öSQUEDA WEB COMPLETADA PARA: "${query}"

INFORMACI√ìN PRINCIPAL:
${parsedResult.informacion_principal}

CONTEXTO LOCAL (${location}):
${parsedResult.contexto_local}

DATOS CLAVE:
${parsedResult.datos_clave ? parsedResult.datos_clave.map(dato => `‚Ä¢ ${dato}`).join('\n') : 'No disponible'}

FECHAS RELEVANTES:
${parsedResult.fechas_relevantes || 'No especificadas'}

FUENTES SUGERIDAS:
${parsedResult.fuentes_sugeridas ? parsedResult.fuentes_sugeridas.map(fuente => `‚Ä¢ ${fuente}`).join('\n') : 'No disponible'}

${nitterOptimization ? `
OPTIMIZACI√ìN PARA REDES SOCIALES:
‚Ä¢ B√∫squeda optimizada para Twitter/X: "${nitterOptimization.optimized_query}"
‚Ä¢ Hashtags sugeridos: ${nitterOptimization.suggested_hashtags.join(', ')}
‚Ä¢ T√©rminos alternativos: ${nitterOptimization.alternative_terms.join(', ')}
` : ''}

RELEVANCIA: ${parsedResult.relevancia || 'No determinada'}
CATEGOR√çA: ${parsedResult.categoria || 'general'}` 
    : 
      `B√öSQUEDA WEB COMPLETADA PARA: "${query}"

${rawResponse}

Consulta optimizada: "${optimizedQuery}"
Enfoque: ${searchContext}
Contexto: ${location}`;

    return {
      success: true,
      query_original: query,
      query_optimized: optimizedQuery,
      location: location,
      focus: focus,
      web_search_result: parsedResult || { raw_response: rawResponse },
      nitter_optimization: nitterOptimization,
      formatted_response: formattedResponse,
      metadata: {
        search_performed: true,
        perplexity_model: 'sonar',
        response_length: rawResponse.length,
        json_parsed: parsedResult !== null,
        nitter_optimization_included: nitterOptimization !== null,
        timestamp: new Date().toISOString()
      }
    };

  } catch (error) {
    console.error(`‚ùå Error ejecutando perplexity_search MCP:`, error);
    throw error;
  }
}

/**
 * Ejecuta la herramienta user_projects: obtiene proyectos del usuario
 * @param {number} limit - L√≠mite de proyectos a obtener
 * @param {string} status - Filtro por estado (opcional)
 * @param {string} priority - Filtro por prioridad (opcional)
 * @param {Object} user - Usuario autenticado
 * @returns {Object} Resultados de proyectos del usuario
 */
async function executeUserProjects(limit = 20, status = null, priority = null, user = null) {
  try {
    if (!user || !user.id) {
      throw new Error('Usuario no autenticado. Se requiere autenticaci√≥n para acceder a proyectos personales.');
    }

    console.log(`üìä Ejecutando user_projects para usuario: ${user.email} (${user.id})`);
    
    const options = { limit };
    if (status) options.status = status;
    if (priority) options.priority = priority;

    const projects = await getUserProjects(user.id, options);
    
    // Obtener estad√≠sticas generales
    const userStats = await getUserStats(user.id);

    // Formatear respuesta para el agente AI
    const formattedResponse = `PROYECTOS DEL USUARIO: ${user.email}

ESTAD√çSTICAS GENERALES:
‚Ä¢ Total de proyectos: ${userStats.totalProjects}
‚Ä¢ Total de items en Codex: ${userStats.totalCodexItems}
‚Ä¢ Total de decisiones: ${userStats.totalDecisions}

DISTRIBUCI√ìN POR ESTADO:
${Object.entries(userStats.projectsByStatus).map(([key, value]) => `‚Ä¢ ${key}: ${value} proyectos`).join('\n')}

PROYECTOS (${projects.length} mostrados):
${projects.map(project => `
üìÅ ${project.title} (ID: ${project.id})
   Estado: ${project.status} | Prioridad: ${project.priority}
   Categor√≠a: ${project.category || 'Sin categor√≠a'}
   Decisiones: ${project.stats.decisionsCount} | Assets: ${project.stats.assetsCount}
   ${project.description ? `Descripci√≥n: ${project.description.substring(0, 100)}...` : ''}
   Creado: ${new Date(project.created_at).toLocaleDateString('es-ES')}
   ${project.tags && project.tags.length > 0 ? `Tags: ${project.tags.join(', ')}` : ''}
`).join('\n')}

Los proyectos est√°n ordenados por fecha de actualizaci√≥n m√°s reciente.`;

    return {
      success: true,
      user_id: user.id,
      user_email: user.email,
      filters_applied: { limit, status, priority },
      total_projects: projects.length,
      user_stats: userStats,
      projects: projects,
      formatted_response: formattedResponse,
      metadata: {
        service: 'user_projects',
        execution_time: new Date().toISOString(),
        data_source: 'supabase'
      }
    };

  } catch (error) {
    console.error(`‚ùå Error ejecutando user_projects MCP:`, error);
    throw error;
  }
}

/**
 * Ejecuta la herramienta user_codex: accede al Codex personal del usuario
 * @param {string} projectId - ID del proyecto (opcional)
 * @param {string} searchQuery - B√∫squeda en contenido (opcional)
 * @param {number} limit - L√≠mite de items a obtener
 * @param {string} type - Filtro por tipo (opcional)
 * @param {Array} tags - Filtro por tags (opcional)
 * @param {Object} user - Usuario autenticado
 * @returns {Object} Resultados del Codex personal
 */
async function executeUserCodex(projectId = null, searchQuery = null, limit = 20, type = null, tags = null, user = null) {
  try {
    if (!user || !user.id) {
      throw new Error('Usuario no autenticado. Se requiere autenticaci√≥n para acceder al Codex personal.');
    }

    console.log(`üìö Ejecutando user_codex para usuario: ${user.email} (${user.id})`);
    console.log(`Filtros - Proyecto: ${projectId}, B√∫squeda: "${searchQuery}", Tipo: ${type}`);
    
    const options = { limit };
    if (projectId) options.projectId = projectId;
    if (searchQuery) options.query = searchQuery;
    if (type) options.type = type;
    if (tags) options.tags = tags;

    const codexItems = await getUserCodex(user.id, options);
    
    // Si hay b√∫squeda espec√≠fica, usar tambi√©n la funci√≥n de b√∫squeda
    let searchResults = null;
    if (searchQuery) {
      searchResults = await searchUserCodex(searchQuery, user.id, { limit: 10 });
    }

    // Formatear respuesta para el agente AI
    const filtersText = [
      projectId ? `Proyecto: ${projectId}` : null,
      searchQuery ? `B√∫squeda: "${searchQuery}"` : null,
      type ? `Tipo: ${type}` : null,
      tags ? `Tags: ${tags.join(', ')}` : null
    ].filter(Boolean).join(' | ');

    const formattedResponse = `CODEX PERSONAL: ${user.email}

${filtersText ? `FILTROS APLICADOS: ${filtersText}` : 'MOSTRANDO TODOS LOS ITEMS'}

RESULTADOS DEL CODEX (${codexItems.length} items):
${codexItems.map(item => `
üìÑ ${item.title} (ID: ${item.id})
   Proyecto: ${item.projectTitle} (${item.projectStatus})
   Tipo: ${item.type}
   ${item.file_name ? `Archivo: ${item.file_name}` : ''}
   ${item.hasTranscription ? 'üéµ Tiene transcripci√≥n de audio' : ''}
   ${item.hasAnalysis ? 'üìä Tiene an√°lisis de documento' : ''}
   ${item.tags && item.tags.length > 0 ? `Tags: ${item.tags.join(', ')}` : ''}
   ${item.contentPreview ? `Contenido: ${item.contentPreview}` : ''}
   ${item.transcriptionPreview ? `Transcripci√≥n: ${item.transcriptionPreview}` : ''}
   Creado: ${new Date(item.created_at).toLocaleDateString('es-ES')}
`).join('\n')}

${searchResults && searchResults.length > 0 ? `
B√öSQUEDA ESPEC√çFICA "${searchQuery}" (${searchResults.length} resultados m√°s relevantes):
${searchResults.slice(0, 5).map(result => `
üîç ${result.title} (Relevancia: ${result.relevanceScore})
   Proyecto: ${result.projectTitle}
   ${result.contentPreview}
`).join('\n')}` : ''}

Total de items disponibles en tu Codex personal.`;

    return {
      success: true,
      user_id: user.id,
      user_email: user.email,
      filters_applied: { projectId, searchQuery, limit, type, tags },
      total_items: codexItems.length,
      codex_items: codexItems,
      search_results: searchResults,
      formatted_response: formattedResponse,
      metadata: {
        service: 'user_codex',
        execution_time: new Date().toISOString(),
        data_source: 'supabase',
        search_performed: !!searchQuery
      }
    };

  } catch (error) {
    console.error(`‚ùå Error ejecutando user_codex MCP:`, error);
    throw error;
  }
}

/**
 * Ejecuta la herramienta project_decisions: obtiene decisiones de un proyecto espec√≠fico
 * @param {string} projectId - ID del proyecto
 * @param {Object} user - Usuario autenticado
 * @returns {Object} Resultados de las decisiones del proyecto
 */
async function executeProjectDecisions(projectId, user = null) {
  try {
    if (!user || !user.id) {
      throw new Error('Usuario no autenticado. Se requiere autenticaci√≥n para acceder a decisiones de proyectos.');
    }

    if (!projectId || typeof projectId !== 'string') {
      throw new Error('Se requiere un project_id v√°lido para obtener las decisiones.');
    }

    console.log(`üéØ Ejecutando project_decisions para proyecto: ${projectId}, usuario: ${user.email}`);
    
    const result = await getProjectDecisions(projectId, user.id);
    
    if (!result || !result.project) {
      throw new Error('Proyecto no encontrado o sin permisos para acceder.');
    }

    const { project, decisions } = result;

    // Formatear respuesta para el agente AI
    const formattedResponse = `DECISIONES DEL PROYECTO: ${project.title} (ID: ${projectId})

RESUMEN:
‚Ä¢ Total de decisiones: ${decisions.length}
‚Ä¢ Proyecto: ${project.title}
‚Ä¢ Usuario: ${user.email}

DECISIONES POR CAPAS:
${decisions.map((decision, index) => `
üîπ DECISI√ìN ${index + 1}: ${decision.title} [${decision.decision_type.toUpperCase()}]
   Tipo: ${decision.decision_type} | Creada: ${new Date(decision.created_at).toLocaleDateString('es-ES')}
   ${decision.description ? `Descripci√≥n: ${decision.description}` : ''}
   ${decision.change_description ? `Cambio: ${decision.change_description}` : ''}
   ${decision.objective ? `Objetivo: ${decision.objective}` : ''}
   ${decision.next_steps ? `Pr√≥ximos pasos: ${decision.next_steps}` : ''}
   ${decision.deadline ? `Fecha l√≠mite: ${new Date(decision.deadline).toLocaleDateString('es-ES')}` : ''}
   
   ${decision.decision_type === 'enfoque' ? `
   üìç DETALLES DE ENFOQUE:
   ${decision.focus_area ? `‚Ä¢ √Årea de enfoque: ${decision.focus_area}` : ''}
   ${decision.focus_context ? `‚Ä¢ Contexto: ${decision.focus_context}` : ''}` : ''}
   
   ${decision.decision_type === 'alcance' ? `
   üåê DETALLES DE ALCANCE:
   ${decision.geographic_scope ? `‚Ä¢ Alcance geogr√°fico: ${decision.geographic_scope}` : ''}
   ${decision.monetary_scope ? `‚Ä¢ Alcance monetario: ${decision.monetary_scope}` : ''}
   ${decision.time_period_start ? `‚Ä¢ Per√≠odo: ${decision.time_period_start} - ${decision.time_period_end || 'Abierto'}` : ''}
   ${decision.target_entities ? `‚Ä¢ Entidades objetivo: ${decision.target_entities}` : ''}
   ${decision.scope_limitations ? `‚Ä¢ Limitaciones: ${decision.scope_limitations}` : ''}` : ''}
   
   ${decision.decision_type === 'configuracion' ? `
   ‚öôÔ∏è DETALLES DE CONFIGURACI√ìN:
   ${decision.output_format && decision.output_format.length > 0 ? `‚Ä¢ Formatos de salida: ${decision.output_format.join(', ')}` : ''}
   ${decision.methodology ? `‚Ä¢ Metodolog√≠a: ${decision.methodology}` : ''}
   ${decision.data_sources ? `‚Ä¢ Fuentes de datos: ${decision.data_sources}` : ''}
   ${decision.search_locations ? `‚Ä¢ Ubicaciones de b√∫squeda: ${decision.search_locations}` : ''}
   ${decision.tools_required ? `‚Ä¢ Herramientas requeridas: ${decision.tools_required}` : ''}
   ${decision.references && decision.references.length > 0 ? `‚Ä¢ Referencias: ${decision.references.join(', ')}` : ''}` : ''}
`).join('\n')}

Las decisiones est√°n ordenadas de m√°s reciente a m√°s antigua.`;

    return {
      success: true,
      user_id: user.id,
      user_email: user.email,
      project_id: projectId,
      project_title: project.title,
      total_decisions: decisions.length,
      decisions: decisions,
      formatted_response: formattedResponse,
      metadata: {
        service: 'project_decisions',
        execution_time: new Date().toISOString(),
        data_source: 'supabase'
      }
    };

  } catch (error) {
    console.error(`‚ùå Error ejecutando project_decisions MCP:`, error);
    throw error;
  }
}

/**
 * Valida los par√°metros de una herramienta
 * @param {Object} tool - Configuraci√≥n de la herramienta
 * @param {Object} parameters - Par√°metros a validar
 * @returns {Object} Resultado de validaci√≥n
 */
function validateToolParameters(tool, parameters) {
  const errors = [];
  
  for (const [paramName, paramConfig] of Object.entries(tool.parameters)) {
    const value = parameters[paramName];
    
    // Verificar par√°metros requeridos
    if (paramConfig.required && (value === undefined || value === null || value === '')) {
      errors.push(`Par√°metro requerido faltante: ${paramName}`);
      continue;
    }
    
    // Si el par√°metro no es requerido y no est√° presente, continuar
    if (!paramConfig.required && (value === undefined || value === null)) {
      continue;
    }
    
    // Validar tipo
    if (paramConfig.type === 'string' && typeof value !== 'string') {
      errors.push(`${paramName} debe ser una cadena de texto`);
    }
    
    if (paramConfig.type === 'integer' && (!Number.isInteger(value) || value < 0)) {
      errors.push(`${paramName} debe ser un n√∫mero entero positivo`);
    }
    
    // Validar rangos para enteros
    if (paramConfig.type === 'integer' && typeof value === 'number') {
      if (paramConfig.min !== undefined && value < paramConfig.min) {
        errors.push(`${paramName} debe ser mayor o igual a ${paramConfig.min}`);
      }
      if (paramConfig.max !== undefined && value > paramConfig.max) {
        errors.push(`${paramName} debe ser menor o igual a ${paramConfig.max}`);
      }
    }
  }
  
  return {
    valid: errors.length === 0,
    errors: errors
  };
}

/**
 * Obtiene el estado general del MCP Server
 * @returns {Object} Estado del servidor
 */
async function getServerStatus() {
  try {
    const status = {
      server_name: 'ExtractorW MCP Server',
      version: '1.0.0',
      status: 'running',
      available_tools: Object.keys(AVAILABLE_TOOLS).length,
      tools_list: Object.keys(AVAILABLE_TOOLS),
      external_services: {}
    };

    // Verificar conectividad con ExtractorT
    try {
      const extractorTResponse = await axios.get(`${EXTRACTOR_T_URL}/status`, { timeout: 5000 });
      status.external_services.extractor_t = {
        url: EXTRACTOR_T_URL,
        status: 'connected',
        response_time: extractorTResponse.headers['x-process-time'] || 'unknown'
      };
    } catch (error) {
      status.external_services.extractor_t = {
        url: EXTRACTOR_T_URL,
        status: 'disconnected',
        error: error.message
      };
    }

    console.log('üìä Estado del MCP Server obtenido');
    return status;
  } catch (error) {
    console.error('‚ùå Error obteniendo estado MCP:', error);
    throw error;
  }
}

/**
 * Ejecuta la herramienta resolve_twitter_handle: resuelve nombres a handles de Twitter
 * @param {string} name - Nombre de la persona a buscar
 * @param {string} context - Contexto adicional
 * @param {string} sector - Sector espec√≠fico
 * @param {Object} user - Usuario autenticado
 * @returns {Object} Resultado de la resoluci√≥n del handle
 */
async function executeResolveTwitterHandle(name, context = '', sector = '', user = null) {
  try {
    console.log(`üîç Ejecutando resolve_twitter_handle MCP: "${name}" (contexto: "${context}", sector: "${sector}")`);
    
    if (!user || !user.id) {
      throw new Error('Usuario autenticado requerido para ejecutar resolve_twitter_handle');
    }
    
    // PASO 1: Intentar primero con Perplexity (m√°s actualizado)
    console.log(`üîç Paso 1: Buscando handle con Perplexity: "${name}"`);
    
    const PERPLEXITY_API_KEY = process.env.PERPLEXITY_API_KEY;
    
    if (PERPLEXITY_API_KEY) {
      try {
        const perplexityResult = await searchHandleWithPerplexity(name, context, sector);
        if (perplexityResult.success) {
          console.log(`‚úÖ Handle encontrado con Perplexity: "${name}" ‚Üí @${perplexityResult.handle}`);
          
          // Guardar en PulsePolitics
          await saveHandleToPulsePolitics(name, perplexityResult.handle, context, sector, 'perplexity_search');
          
          return {
            success: true,
            resolved_username: perplexityResult.handle,
            confidence: 0.9,
            method: 'perplexity_search',
            original_name: name,
            context_provided: context,
            sector_provided: sector,
            raw_response: perplexityResult.raw_response,
            saved_to_pulsepolitics: true
          };
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è Perplexity fall√≥, intentando con GPT-4o: ${error.message}`);
      }
    }
    
    // PASO 2: Usar web search para verificar informaci√≥n real
    console.log(`üîç Paso 2: Buscando handle con web search verificado: "${name}"`);
    
    try {
      const webSearchResult = await searchHandleWithWebSearch(name, context, sector);
      if (webSearchResult.success) {
        console.log(`‚úÖ Handle encontrado con web search: "${name}" ‚Üí @${webSearchResult.handle}`);
        
        // Guardar en PulsePolitics
        await saveHandleToPulsePolitics(name, webSearchResult.handle, context, sector, 'web_search');
        
        return {
          success: true,
          resolved_username: webSearchResult.handle,
          confidence: 0.85,
          method: 'web_search',
          original_name: name,
          context_provided: context,
          sector_provided: sector,
          raw_response: webSearchResult.raw_response,
          saved_to_pulsepolitics: true
        };
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è Web search fall√≥, usando GPT-4o como √∫ltimo recurso: ${error.message}`);
    }
    
    // PASO 3: Fallback a GPT-4o SOLO como √∫ltimo recurso (con advertencia)
    console.log(`üîç Paso 3: √öLTIMO RECURSO - GPT-4o (puede no ser preciso): "${name}"`);
    
    const searchQuery = `ADVERTENCIA: Este es un √∫ltimo recurso. Busca informaci√≥n sobre "${name}"${context ? ` (${context})` : ''}${sector ? ` del sector ${sector}` : ''} en Guatemala y su posible handle de Twitter/X. Responde SOLO el @handle si tienes certeza, o NONE si no est√°s seguro.`;
    
    const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
    
    if (!OPENAI_API_KEY) {
      throw new Error('OPENAI_API_KEY no configurada para resoluci√≥n de handles');
    }

    const payload = {
      model: 'gpt-4o',
      messages: [
        {
          role: 'system',
          content: `Eres un investigador especializado en encontrar handles oficiales de Twitter/X de personas p√∫blicas, especialmente de Guatemala.

CASOS ESPEC√çFICOS IMPORTANTES:
- Bernardo Ar√©valo de Le√≥n (Presidente de Guatemala 2024-2028): Su handle oficial es @BArevalodeLeon
- Es importante ser preciso con los handles oficiales de pol√≠ticos guatemaltecos

INSTRUCCIONES PARA B√öSQUEDA DIN√ÅMICA:
1. Usa tu conocimiento actualizado para buscar el handle oficial de la persona
2. Para pol√≠ticos guatemaltecos, verifica cargos actuales (2024-2025)
3. Prioriza cuentas verificadas y oficiales
4. Considera variaciones del nombre (nombres completos, apodos, t√≠tulos)
5. Si encuentras el handle oficial, responde EXACTAMENTE: @handle
6. Si NO existe cuenta o no puedes encontrarla, responde EXACTAMENTE: NONE
7. NO agregues explicaciones, solo el handle o NONE

CONTEXTO GEOGR√ÅFICO: Guatemala, Centroam√©rica
ENFOQUE: Personas p√∫blicas, pol√≠ticos, funcionarios, figuras relevantes
FORMATO RESPUESTA: @handle o NONE (exactamente as√≠, sin texto adicional)`
        },
        {
          role: 'user',
          content: searchQuery
        }
      ],
      temperature: 0.1,
      max_tokens: 20
    };

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      throw new Error(`Error en API de OpenAI: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      throw new Error('Respuesta inv√°lida de OpenAI API');
    }

    let rawResponse = data.choices[0].message.content?.trim() || '';
    console.log(`üìù Respuesta de GPT-4o: "${rawResponse}"`);
    
    // Extraer handle de la respuesta
    let resolvedHandle = null;
    let confidence = 0.5;
    
    if (rawResponse.toUpperCase() === 'NONE' || rawResponse.includes('NONE')) {
      console.log(`‚ùå No se encontr√≥ handle de Twitter para "${name}"`);
      return {
        success: false,
        error: `No se encontr√≥ cuenta de Twitter para "${name}"`,
        resolved_username: null,
        confidence: 0,
        method: 'gpt4o_search'
      };
    }
    
    // Extraer handle usando regex mejorado
    const handlePattern = /@([a-zA-Z0-9_]+)/;
    const urlPattern = /(?:twitter\.com|x\.com)\/([a-zA-Z0-9_]+)/i;
    
    let handleMatch = rawResponse.match(handlePattern);
    if (!handleMatch) {
      handleMatch = rawResponse.match(urlPattern);
    }
    
    if (handleMatch) {
      resolvedHandle = handleMatch[1];
      confidence = 0.95; // Mayor confianza con GPT-4o 
      console.log(`‚úÖ Handle resuelto con GPT-4o: "${name}" ‚Üí @${resolvedHandle}`);
      
      // GUARDAR AUTOM√ÅTICAMENTE EN PULSEPOLITICS
      await saveHandleToPulsePolitics(name, resolvedHandle, context, sector, 'gpt4o_search');
      
    } else {
      console.log(`‚ö†Ô∏è No se pudo extraer handle de: "${rawResponse}"`);
      return {
        success: false,
        error: `No se pudo extraer handle v√°lido de la respuesta`,
        resolved_username: null,
        confidence: 0,
        method: 'gpt4o_search',
        raw_response: rawResponse
      };
    }
    
    return {
      success: true,
      resolved_username: resolvedHandle,
      confidence: confidence,
      method: 'gpt4o_search',
      original_name: name,
      context_provided: context,
      sector_provided: sector,
      raw_response: rawResponse,
      saved_to_pulsepolitics: true
    };

  } catch (error) {
    console.error(`‚ùå Error ejecutando resolve_twitter_handle MCP:`, error);
    return {
      success: false,
      error: error.message,
      resolved_username: null,
      confidence: 0,
      method: 'error'
    };
  }
}

/**
 * Obtiene tweets recientes de un usuario espec√≠fico usando Nitter CON AN√ÅLISIS DE SENTIMIENTO
 * @param {string} username - Nombre de usuario sin @
 * @param {number} limit - N√∫mero m√°ximo de tweets
 * @param {boolean} include_retweets - Incluir retweets
 * @param {boolean} include_replies - Incluir replies
 * @param {Object} user - Usuario autenticado
 * @returns {Object} Respuesta con tweets del usuario y an√°lisis completo
 */
async function executeNitterProfile(username, limit = 10, include_retweets = false, include_replies = false, user) {
  const startTime = Date.now();
  
  try {
    console.log(`üîç Procesando nitter_profile: "@${username}" (l√≠mite: ${limit})`);
    
    if (!user || !user.id) {
      throw new Error('Usuario no autenticado - se requiere autenticaci√≥n para nitter_profile');
    }
    
    // ‚úÖ USAR FUNCI√ìN COMPLETA CON AN√ÅLISIS DE SENTIMIENTO
    const sessionId = `nitter_profile_mcp_${Date.now()}`;
    const result = await processNitterProfile(
      username.replace('@', ''), // Remover @ si existe
      user.id,
      sessionId,
      limit,
      include_retweets,
      include_replies
    );
    
    if (result.success) {
      console.log(`‚úÖ Procesamiento completo de @${username}: ${result.data.tweets_found} tweets con an√°lisis de sentimiento`);
      
      // Formatear respuesta para compatibilidad MCP/Vizta
      const formattedTweets = result.data.tweets?.map(tweet => ({
        id: tweet.tweet_id || tweet.id,
        text: tweet.texto,
        author: tweet.usuario,
        date: tweet.fecha,
        metrics: {
          likes: tweet.likes || 0,
          retweets: tweet.retweets || 0,
          replies: tweet.replies || 0
        },
        url: tweet.enlace,
        is_retweet: false,
        is_reply: false,
        // üß† CAMPOS DE AN√ÅLISIS DE IA (¬°Ahora disponibles!)
        sentimiento: tweet.sentimiento,
        score_sentimiento: tweet.score_sentimiento,
        intencion_comunicativa: tweet.intencion_comunicativa,
        entidades_mencionadas: tweet.entidades_mencionadas,
        engagement: tweet.engagement,
        categoria: tweet.categoria
      })) || [];
      
      return {
        success: true,
        username: username,
        profile_info: result.data.profile_info || {},
        tweets: formattedTweets,
        tweets_count: result.data.tweets_found,
        execution_time: Date.now() - startTime,
        source: 'nitter_profile_with_sentiment',
        
        // Informaci√≥n de guardado en Supabase (ya incluida en processNitterProfile)
        supabase_saved: true,
        supabase_saved_count: result.data.tweets_saved,
        profile_link: `https://twitter.com/${username.replace('@', '')}`,
        
        // M√©tricas de an√°lisis de IA
        analytics: {
          categoria: result.data.categoria,
          detected_group: result.data.detected_group,
          total_engagement: result.data.total_engagement,
          avg_engagement: result.data.avg_engagement,
          sentiment_analysis: true,
          ai_processing: true
        },
        
        metadata: {
          include_retweets: include_retweets,
          include_replies: include_replies,
          requested_limit: limit,
          actual_results: result.data.tweets_found,
          sentiment_analysis_included: true,
          processing_method: 'complete_nitter_profile_service'
        }
      };
    } else {
      throw new Error(result.error || 'Error procesando perfil con an√°lisis de sentimiento');
    }
    
  } catch (error) {
    console.error(`‚ùå Error procesando perfil @${username}:`, error.message);
    
    return {
      success: false,
      username: username,
      error: error.message,
      tweets: [],
      tweets_count: 0,
      execution_time: Date.now() - startTime,
      source: 'nitter_profile_with_sentiment',
      metadata: {
        error_type: 'processing_error',
        processing_method: 'complete_nitter_profile_service'
      }
    };
  }
}

/**
 * Buscar handle usando Perplexity con capacidades web
 */
async function searchHandleWithPerplexity(name, context = '', sector = '') {
  try {
    const PERPLEXITY_API_KEY = process.env.PERPLEXITY_API_KEY;
    
    const searchQuery = `Busca el handle oficial de Twitter/X de "${name}"${context ? ` (${context})` : ''}${sector ? ` del sector ${sector}` : ''} en Guatemala. Verifica en fuentes oficiales, sitios web gubernamentales, medios de comunicaci√≥n y perfiles verificados de Twitter/X. Es CR√çTICO que sea el handle REAL y ACTUAL.`;
    
    const payload = {
      model: 'sonar',
      messages: [
        {
          role: 'system',
          content: `Eres un investigador especializado en encontrar handles REALES y ACTUALES de Twitter/X de figuras p√∫blicas guatemaltecas.

INSTRUCCIONES CR√çTICAS:
1. Busca √öNICAMENTE en fuentes oficiales: sitios web gubernamentales, medios verificados, perfiles oficiales de Twitter/X
2. Verifica que la cuenta est√© ACTIVA y sea OFICIAL (verificada si es posible)
3. Para pol√≠ticos: busca en sitios oficiales del gobierno, comunicados de prensa oficiales
4. Para el Presidente de Guatemala: busca en el sitio presidencial oficial (presidencia.gob.gt)
5. Verifica que el handle coincida con el nombre real de la persona
6. Si encuentras el handle OFICIAL y VERIFICADO, responde EXACTAMENTE: @handle
7. Si NO encuentras una cuenta oficial verificable, responde EXACTAMENTE: NONE
8. NO inventes handles, NO uses aproximaciones

FORMATO: @handle o NONE (sin explicaciones)`
        },
        {
          role: 'user',
          content: searchQuery
        }
      ],
      temperature: 0.0,
      max_tokens: 30
    };

    const response = await fetch('https://api.perplexity.ai/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${PERPLEXITY_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      throw new Error(`Perplexity API error: ${response.status}`);
    }

    const data = await response.json();
    const rawResponse = data.choices[0].message.content?.trim() || '';
    
    if (rawResponse.toUpperCase() === 'NONE' || rawResponse.includes('NONE')) {
      return { success: false, raw_response: rawResponse };
    }
    
    const handlePattern = /@([a-zA-Z0-9_]+)/;
    const handleMatch = rawResponse.match(handlePattern);
    
    if (handleMatch) {
      return {
        success: true,
        handle: handleMatch[1],
        raw_response: rawResponse
      };
    }
    
    return { success: false, raw_response: rawResponse };
    
  } catch (error) {
    console.error(`‚ùå Error en b√∫squeda Perplexity:`, error);
    return { success: false, error: error.message };
  }
}

/**
 * Buscar handle usando m√∫ltiples estrategias de b√∫squeda web
 */
async function searchHandleWithWebSearch(name, context = '', sector = '') {
  try {
    console.log(`üîç Iniciando b√∫squeda web avanzada para: "${name}"`);
    
    // ESTRATEGIA 1: B√∫squeda con m√∫ltiples t√©rminos espec√≠ficos
    const searchQueries = [
      `"${name}" Twitter Guatemala @`,
      `"${name}" X.com Guatemala perfil`,
      `${name} Guatemala twitter handle @`,
      `"${name}" cuenta oficial Twitter Guatemala`,
      `${name} Guatemala redes sociales @`
    ];
    
    for (const query of searchQueries) {
      console.log(`üîç Probando query: ${query}`);
      
      const result = await performPerplexityWebSearch(query, name);
      if (result.success) {
        console.log(`‚úÖ Handle encontrado con query "${query}": @${result.handle}`);
        return result;
      }
      
      // Esperar 500ms entre queries para evitar rate limiting
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    // ESTRATEGIA 2: B√∫squeda por contexto profesional si est√° disponible
    if (context || sector) {
      const contextQuery = `"${name}"${context ? ` ${context}` : ''}${sector ? ` ${sector}` : ''} Guatemala Twitter @`;
      console.log(`üîç Probando query contextual: ${contextQuery}`);
      
      const contextResult = await performPerplexityWebSearch(contextQuery, name);
      if (contextResult.success) {
        console.log(`‚úÖ Handle encontrado con contexto: @${contextResult.handle}`);
        return contextResult;
      }
    }
    
    return { success: false, error: 'No se encontr√≥ handle v√°lido despu√©s de m√∫ltiples intentos' };
    
  } catch (error) {
    console.error(`‚ùå Error en web search:`, error);
    return { success: false, error: error.message };
  }
}

/**
 * Realizar b√∫squeda con Perplexity optimizada para web search
 */
async function performPerplexityWebSearch(query, originalName) {
  const PERPLEXITY_API_KEY = process.env.PERPLEXITY_API_KEY;
  
  if (!PERPLEXITY_API_KEY) {
    throw new Error('PERPLEXITY_API_KEY no disponible');
  }
  
  const payload = {
    model: 'sonar',
    messages: [
      {
        role: 'system',
        content: `Eres un investigador especializado en encontrar informaci√≥n verificable de Twitter/X.

TAREA: Buscar el handle oficial de Twitter/X de la persona mencionada.

PROCESO:
1. Busca en fuentes web actuales (noticias, perfiles oficiales, sitios web)
2. Verifica que sea la persona correcta comparando informaci√≥n
3. Extrae √öNICAMENTE el @handle si lo encuentras en fuentes confiables
4. Si no encuentras informaci√≥n verificable, responde NONE

REGLAS CR√çTICAS:
- Solo responde si encuentras el handle en fuentes web reales
- NO inventes ni adivines handles
- NO uses informaci√≥n que no puedas verificar
- Formato: @handle o NONE (sin explicaciones)`
      },
      {
        role: 'user',
        content: query
      }
    ],
    temperature: 0.0,
    max_tokens: 20
  };

  const response = await fetch('https://api.perplexity.ai/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${PERPLEXITY_API_KEY}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(payload)
  });

  if (!response.ok) {
    throw new Error(`Perplexity API error: ${response.status}`);
  }

  const data = await response.json();
  const rawResponse = data.choices[0].message.content?.trim() || '';
  
  console.log(`üìù Perplexity response: "${rawResponse}"`);
  
  // Procesar respuesta
  if (rawResponse.toUpperCase() === 'NONE' || rawResponse.includes('NONE') || !rawResponse.includes('@')) {
    return { success: false, error: 'No se encontr√≥ handle v√°lido' };
  }
  
  // Extraer handle
  const handlePattern = /@([a-zA-Z0-9_]+)/;
  const handleMatch = rawResponse.match(handlePattern);
  
  if (handleMatch) {
    const foundHandle = handleMatch[1];
    
    // Verificaci√≥n b√°sica: el handle debe tener sentido para el nombre
    const nameParts = originalName.toLowerCase().split(' ');
    const handleLower = foundHandle.toLowerCase();
    
    // Al menos una parte del nombre debe estar relacionada con el handle
    const isReasonable = nameParts.some(part => 
      handleLower.includes(part) || 
      part.includes(handleLower.substring(0, 4)) ||
      // Para nombres compuestos como "Karin Herrera" ‚Üí "KarinHerreraGT"
      handleLower.includes(part.substring(0, 4))
    );
    
    if (isReasonable) {
      return {
        success: true,
        handle: foundHandle,
        raw_response: rawResponse,
        query_used: query
      };
    } else {
      console.log(`‚ö†Ô∏è Handle "${foundHandle}" no parece relacionado con "${originalName}"`);
      return { success: false, error: 'Handle encontrado no relacionado con el nombre' };
    }
  }
  
  return { success: false, error: 'No se pudo extraer handle de la respuesta' };
}

/**
 * Guardar handle en PulsePolitics
 */
async function saveHandleToPulsePolitics(name, handle, context = '', sector = '', method = 'unknown') {
  try {
    console.log(`üíæ Guardando handle resuelto en PulsePolitics: "${name}" ‚Üí @${handle}`);
    
    const lauraMemoryClient = require('./lauraMemoryClient');
    
    if (lauraMemoryClient) {
      const saveResult = await lauraMemoryClient.saveUserDiscovery(
        name,
        handle,
        `${context ? context + ' - ' : ''}${sector ? sector + ' - ' : ''}Resuelto con ${method}`,
        sector || 'general'
      );
      
      if (saveResult) {
        console.log(`‚úÖ Handle guardado exitosamente en PulsePolitics: "${name}" ‚Üí @${handle}`);
      } else {
        console.log(`‚ö†Ô∏è No se pudo guardar en PulsePolitics (servicio no disponible)`);
      }
    }
  } catch (saveError) {
    console.warn(`‚ö†Ô∏è Error guardando en PulsePolitics:`, saveError.message);
  }
}

module.exports = {
  listAvailableTools,
  getToolInfo,
  executeTool,
  executeNitterContext,
  executePerplexitySearch,
  executeUserProjects,
  executeUserCodex,
  executeProjectDecisions,
  executeResolveTwitterHandle,
  executeNitterProfile,
  getServerStatus,
  expandSearchTerms,
  enhanceSearchTermsWithPerplexity,
  AVAILABLE_TOOLS
}; 