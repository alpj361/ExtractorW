const express = require('express');
const router = express.Router();
const { GoogleGenerativeAI } = require('@google/generative-ai');
const { verifyUserAccess } = require('../middlewares/auth');
const { logUsage } = require('../services/logs');
const supabase = require('../utils/supabase');

// Costo fijo para generaci√≥n de sugerencias de proyecto
const SUGGESTIONS_COST = 5;

// Inicializar Gemini
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

/**
 * POST /api/project-suggestions
 * Genera sugerencias inteligentes para un proyecto usando Gemini 1.5 Flash
 */
router.post('/', verifyUserAccess, async (req, res) => {
  const startTime = Date.now();
  
  try {
    const { project } = req.body;
    const user = req.user;
    
    if (!project) {
      return res.status(400).json({ error: 'Datos del proyecto requeridos' });
    }

    // Validar que tenemos la API key de Gemini
    if (!process.env.GEMINI_API_KEY) {
      return res.status(500).json({ error: 'Gemini API key not configured' });
    }

    console.log(`üí° Usuario ${user.profile.email} solicitando sugerencias para proyecto: "${project.title}"`);

    // 1. VERIFICAR CR√âDITOS (excepto para admins)
    if (user.profile.role !== 'admin') {
      if (!user.profile.credits || user.profile.credits < SUGGESTIONS_COST) {
        console.log(`‚ùå Usuario ${user.profile.email} sin cr√©ditos suficientes: ${user.profile.credits || 0} < ${SUGGESTIONS_COST}`);
        return res.status(402).json({
          error: 'Cr√©ditos insuficientes',
          message: `Se requieren ${SUGGESTIONS_COST} cr√©ditos para generar sugerencias. Cr√©ditos actuales: ${user.profile.credits || 0}`,
          required_credits: SUGGESTIONS_COST,
          current_credits: user.profile.credits || 0
        });
      }
      console.log(`‚úÖ Usuario ${user.profile.email} tiene cr√©ditos suficientes: ${user.profile.credits} >= ${SUGGESTIONS_COST}`);
    } else {
      console.log(`üëë Usuario admin ${user.profile.email} - acceso ilimitado`);
    }

    // Preparar contexto detallado de decisiones
    const decisionsContext = project.decisions && project.decisions.length > 0 ? 
      project.decisions.map(d => `
      - ${d.title} (Tipo: ${d.decision_type}, Secuencia: ${d.sequence_number})
        Descripci√≥n: ${d.description || 'Sin descripci√≥n'}
        Fecha: ${d.created_at ? new Date(d.created_at).toLocaleDateString('es-GT') : 'No especificada'}
      `).join('\n') : 'No se han tomado decisiones a√∫n';

    // Generar an√°lisis del progreso del proyecto
    const projectProgress = (() => {
      const decisionTypes = project.decisions ? project.decisions.map(d => d.decision_type) : [];
      const hasEnfoque = decisionTypes.includes('enfoque');
      const hasAlcance = decisionTypes.includes('alcance');
      const hasConfiguracion = decisionTypes.includes('configuracion');
      
      if (!hasEnfoque && !hasAlcance && !hasConfiguracion) return "inicio - sin decisiones estructurales";
      if (hasEnfoque && !hasAlcance && !hasConfiguracion) return "definici√≥n de enfoque completada";
      if (hasEnfoque && hasAlcance && !hasConfiguracion) return "enfoque y alcance definidos";
      if (hasEnfoque && hasAlcance && hasConfiguracion) return "estructura completa definida";
      return "progreso parcial";
    })();

    // Preparar el prompt especializado para auditor√≠a
    const prompt = `
Eres un experto consultor en auditor√≠a municipal de Guatemala con 15+ a√±os de experiencia. 
Analiza este proyecto espec√≠fico de auditor√≠a y proporciona sugerencias muy espec√≠ficas basadas en el contexto actual.

=== PROYECTO DE AUDITOR√çA ===
T√≠tulo: "${project.title}"
Descripci√≥n: ${project.description || 'No especificada'}
Estado actual: ${project.status} (Prioridad: ${project.priority})
Categor√≠a de auditor√≠a: ${project.category || 'General'}
Per√≠odo: ${project.start_date || 'No definido'} ‚Üí ${project.target_date || 'No definido'}
Etiquetas/√Åreas: ${project.tags ? project.tags.join(', ') : 'No especificadas'}

=== PROGRESO ACTUAL ===
Fase del proyecto: ${projectProgress}
Decisiones tomadas hasta ahora:
${decisionsContext}

=== CONTEXTO DE TRABAJO ===
El auditor est√° trabajando en una plataforma que incluye:
- **Sondeos**: Para an√°lizar temas espec√≠ficos con m√∫ltiples fuentes de informaci√≥n
- **Tendencias**: Para monitorear menciones en redes sociales y medios
- **Noticias**: Para revisar cobertura medi√°tica relevante
- **Codex**: Para gestionar documentos, evidencias y referencias
- **Decisiones por Capas**: Para estructurar el proceso (enfoque ‚Üí alcance ‚Üí configuraci√≥n)

=== INSTITUCIONES Y MARCO LEGAL GUATEMALA ===
- Contralor√≠a General de Cuentas (CGC) - ente rector de auditor√≠a
- Ministerio P√∫blico (MP) - para casos penales
- SAT - para aspectos tributarios
- INFODIGTO - para transparencia y acceso a informaci√≥n
- Ley de Acceso a la Informaci√≥n P√∫blica
- Ley de Probidad y Responsabilidades

=== INSTRUCCIONES ESPEC√çFICAS ===
Bas√°ndote en el proyecto espec√≠fico descrito, sus decisiones actuales y su fase de progreso:

1. Identifica las lagunas o pr√≥ximos pasos l√≥gicos espec√≠ficos para ESTE proyecto
2. Considera qu√© decisiones faltan por tomar seg√∫n la metodolog√≠a de capas
3. Sugiere acciones concretas que aprovechen las herramientas disponibles
4. Incluye referencias espec√≠ficas a instituciones guatemaltecas cuando sea relevante
5. Proporciona 3-5 sugerencias priorizadas y espec√≠ficas para el contexto actual

IMPORTANTE: Las sugerencias deben ser espec√≠ficas para este proyecto, no gen√©ricas. Usa los datos del proyecto para contextualizar cada recomendaci√≥n.

Responde en formato JSON v√°lido:
{
  "analysis": "An√°lisis espec√≠fico del estado actual de ESTE proyecto considerando las decisiones ya tomadas y lo que falta por hacer",
  "suggestions": [
    {
      "id": "suggestion_1",
      "title": "T√≠tulo espec√≠fico relacionado con el proyecto actual",
      "description": "Descripci√≥n que mencione aspectos espec√≠ficos del proyecto y su contexto actual",
      "category": "analysis|research|platform|external|documentation",
      "priority": "high|medium|low",
      "action": "Acci√≥n muy espec√≠fica que considere el estado actual del proyecto",
      "estimatedTime": "Tiempo realista para esta actividad espec√≠fica",
      "tools": ["herramientas espec√≠ficas a usar para este proyecto"]
    }
  ]
}
`;

    // Llamar a Gemini 1.5 Flash
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();

    // Parsear la respuesta JSON
    let suggestionsData;
    try {
      // Limpiar la respuesta para extraer solo el JSON
      const jsonMatch = text.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        suggestionsData = JSON.parse(jsonMatch[0]);
      } else {
        throw new Error('No se encontr√≥ JSON v√°lido en la respuesta');
      }
    } catch (parseError) {
      console.error('Error parsing Gemini response:', parseError);
      console.error('Raw response:', text);
      
      // Fallback con sugerencias espec√≠ficas al proyecto
      const projectKeywords = project.tags ? project.tags.join(', ') : project.title;
      const nextDecisionType = (() => {
        const decisionTypes = project.decisions ? project.decisions.map(d => d.decision_type) : [];
        if (!decisionTypes.includes('enfoque')) return 'enfoque';
        if (!decisionTypes.includes('alcance')) return 'alcance';
        if (!decisionTypes.includes('configuracion')) return 'configuraci√≥n';
        return 'implementaci√≥n';
      })();

      suggestionsData = {
        analysis: `El proyecto "${project.title}" est√° en estado ${project.status} con prioridad ${project.priority}. Se han tomado ${project.decisions?.length || 0} decisiones. El siguiente paso recomendado es definir ${nextDecisionType}.`,
        suggestions: [
          {
            id: "suggestion_1",
            title: `Crear sondeo sobre "${projectKeywords}"`,
            description: `Utiliza la herramienta de sondeos para analizar espec√≠ficamente el tema de ${project.title}, obteniendo contexto actual y tendencias relacionadas con ${projectKeywords}.`,
            category: "platform",
            priority: project.priority === 'high' ? "high" : "medium",
            action: `Crear un sondeo con las palabras clave: ${projectKeywords}`,
            estimatedTime: "30 minutos",
            tools: ["Sondeos", "Tendencias"]
          },
          {
            id: "suggestion_2", 
            title: `Definir decisi√≥n de ${nextDecisionType} para el proyecto`,
            description: `El proyecto necesita una decisi√≥n de tipo "${nextDecisionType}" para continuar con la metodolog√≠a de auditor√≠a por capas.`,
            category: "platform",
            priority: "high",
            action: `Usar el sistema de Decisiones por Capas para crear una decisi√≥n de ${nextDecisionType}`,
            estimatedTime: "20 minutos",
            tools: ["Decisiones por Capas"]
          },
          {
            id: "suggestion_3",
            title: `Revisar cobertura medi√°tica de "${project.category || 'auditor√≠a municipal'}"`,
            description: `Buscar noticias y menciones relacionadas con ${project.title} para identificar contexto p√∫blico y posibles riesgos reputacionales.`,
            category: "research",
            priority: "medium",
            action: `Buscar en noticias con t√©rminos: ${projectKeywords}`,
            estimatedTime: "45 minutos",
            tools: ["Noticias", "Tendencias"]
          },
          {
            id: "suggestion_4",
            title: "Preparar documentaci√≥n de evidencias",
            description: `Crear estructura de carpetas en Codex espec√≠fica para ${project.title} y sus hallazgos de auditor√≠a.`,
            category: "documentation", 
            priority: "medium",
            action: `Organizar Codex con categor√≠as espec√≠ficas para este proyecto de ${project.category || 'auditor√≠a'}`,
            estimatedTime: "30 minutos",
            tools: ["Codex"]
          }
        ]
      };
    }

    // Agregar timestamp
    suggestionsData.generatedAt = new Date().toISOString();

    // 2. DEBITAR CR√âDITOS Y REGISTRAR LOGS (solo si no es admin)
    const responseTime = Date.now() - startTime;
    
    if (user.profile.role !== 'admin') {
      try {
        console.log(`üí≥ Debitando ${SUGGESTIONS_COST} cr√©ditos a ${user.profile.email}`);
        
        // Debitar cr√©ditos
        const { data: updatedProfile, error: debitError } = await supabase
          .from('profiles')
          .update({ 
            credits: user.profile.credits - SUGGESTIONS_COST,
            updated_at: new Date().toISOString()
          })
          .eq('id', user.id)
          .select('credits')
          .single();

        if (debitError) {
          console.error('‚ùå Error debitando cr√©ditos:', debitError);
          throw new Error('Error procesando cr√©ditos');
        }

        console.log(`‚úÖ Cr√©ditos actualizados: ${user.profile.credits} ‚Üí ${updatedProfile.credits}`);
        
        // Registrar en logs
        await logUsage(
          user,
          '/api/project-suggestions',
          SUGGESTIONS_COST,
          req,
          {
            project_title: project.title,
            project_id: project.id || 'unknown',
            decisions_count: project.decisions?.length || 0,
            suggestions_count: suggestionsData.suggestions?.length || 0,
            response_time: responseTime,
            success: true
          }
        );

        console.log(`üìù Log registrado para generaci√≥n de sugerencias de ${user.profile.email}`);
        
      } catch (creditError) {
        console.error('‚ùå Error en sistema de cr√©ditos:', creditError);
        // No fallar la respuesta, pero registrar el error
        await logUsage(
          user,
          '/api/project-suggestions',
          0, // No se cobraron cr√©ditos por el error
          req,
          {
            project_title: project.title,
            error: creditError.message,
            response_time: responseTime,
            success: false
          }
        );
        
        return res.status(500).json({
          error: 'Error procesando cr√©ditos',
          message: 'Las sugerencias se generaron pero hubo un problema con el sistema de cr√©ditos'
        });
      }
    } else {
      // Para admins, solo registrar el log sin cobrar cr√©ditos
      await logUsage(
        user,
        '/api/project-suggestions',
        0, // Admin no paga cr√©ditos
        req,
        {
          project_title: project.title,
          project_id: project.id || 'unknown',
          decisions_count: project.decisions?.length || 0,
          suggestions_count: suggestionsData.suggestions?.length || 0,
          response_time: responseTime,
          admin_access: true,
          success: true
        }
      );
      
      console.log(`üìù Log registrado para admin ${user.profile.email} (sin costo)`);
    }

    res.json(suggestionsData);

  } catch (error) {
    const responseTime = Date.now() - startTime;
    console.error('‚ùå Error generating project suggestions:', error);
    
    // Registrar error en logs si tenemos usuario
    if (req.user) {
      try {
        await logUsage(
          req.user,
          '/api/project-suggestions',
          0, // No se cobraron cr√©ditos por el error
          req,
          {
            error: error.message,
            response_time: responseTime,
            success: false
          }
        );
      } catch (logError) {
        console.error('‚ùå Error registrando log de error:', logError);
      }
    }
    
    res.status(500).json({ 
      error: 'Error generando sugerencias del proyecto',
      details: error.message 
    });
  }
});

/**
 * GET /api/project-suggestions/cost
 * Obtiene el costo para generar sugerencias de proyecto
 */
router.get('/cost', verifyUserAccess, async (req, res) => {
  try {
    const user = req.user;
    
    const costInfo = {
      operation: 'project-suggestions',
      cost_credits: SUGGESTIONS_COST,
      cost_description: 'Generaci√≥n de sugerencias inteligentes para proyecto usando Gemini AI',
      user_credits: user.profile.role === 'admin' ? 'ilimitado' : (user.profile.credits || 0),
      can_afford: user.profile.role === 'admin' || (user.profile.credits >= SUGGESTIONS_COST),
      admin_access: user.profile.role === 'admin'
    };
    
    console.log(`üí∞ Usuario ${user.profile.email} consultando costo de sugerencias: ${SUGGESTIONS_COST} cr√©ditos`);
    
    res.json(costInfo);
    
  } catch (error) {
    console.error('‚ùå Error obteniendo costo de sugerencias:', error);
    res.status(500).json({
      error: 'Error obteniendo informaci√≥n de costo',
      details: error.message
    });
  }
});

/**
 * GET /api/project-suggestions/stats
 * Obtiene estad√≠sticas de uso de sugerencias del usuario
 */
router.get('/stats', verifyUserAccess, async (req, res) => {
  try {
    const user = req.user;
    
    if (!supabase) {
      return res.status(503).json({
        error: 'Base de datos no disponible',
        message: 'Supabase no est√° configurado'
      });
    }
    
    // Obtener estad√≠sticas de uso de sugerencias
    const { data: usageLogs, error } = await supabase
      .from('usage_logs')
      .select('credits_consumed, timestamp, request_params')
      .eq('user_email', user.profile.email)
      .eq('operation', '/api/project-suggestions')
      .order('timestamp', { ascending: false });
    
    if (error) {
      console.error('‚ùå Error obteniendo estad√≠sticas:', error);
      return res.status(500).json({
        error: 'Error obteniendo estad√≠sticas',
        message: error.message
      });
    }
    
    const stats = {
      total_suggestions_generated: usageLogs.length,
      total_credits_spent: usageLogs.reduce((sum, log) => sum + (log.credits_consumed || 0), 0),
      last_generation: usageLogs.length > 0 ? usageLogs[0].timestamp : null,
      recent_generations: usageLogs.slice(0, 10).map(log => ({
        timestamp: log.timestamp,
        credits_consumed: log.credits_consumed,
        project_title: log.request_params?.project_title || 'Proyecto sin t√≠tulo'
      }))
    };
    
    console.log(`üìä Estad√≠sticas de sugerencias para ${user.profile.email}: ${stats.total_suggestions_generated} generaciones`);
    
    res.json(stats);
    
  } catch (error) {
    console.error('‚ùå Error obteniendo estad√≠sticas de sugerencias:', error);
    res.status(500).json({
      error: 'Error obteniendo estad√≠sticas',
      details: error.message
    });
  }
});

module.exports = router; 