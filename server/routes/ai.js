const express = require('express');
const router = express.Router();
const { GoogleGenerativeAI } = require('@google/generative-ai');
const { verifyUserAccess } = require('../middlewares/auth');
const supabase = require('../utils/supabase');

// Inicializar Gemini
const genai = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

/**
 * POST /api/ai/generate-description
 * Genera descripci√≥n de contenido usando Gemini AI
 */
router.post('/generate-description', verifyUserAccess, async (req, res) => {
  try {
    const { url, transcription, type = 'tweet_description' } = req.body;
    const user = req.user;

    if (!url && !transcription) {
      return res.status(400).json({ error: 'URL o transcripci√≥n es requerida' });
    }

    if (!process.env.GEMINI_API_KEY) {
      return res.status(500).json({ error: 'Gemini API key no configurada' });
    }

    const sourceInfo = transcription ? `transcripci√≥n: ${transcription.substring(0, 200)}...` : `URL: ${url}`;
    console.log(`ü§ñ Usuario ${user.profile.email} solicitando descripci√≥n basada en ${transcription ? 'transcripci√≥n' : 'URL'}`);

    // Configurar modelo Gemini
    const model = genai.getGenerativeModel({ model: 'gemini-2.5-flash' });

    // Crear prompt diferente seg√∫n si tenemos transcripci√≥n o solo URL
    let prompt;
    
    if (transcription) {
      // Prompt para generar descripci√≥n basada en transcripci√≥n
      prompt = `Analiza la siguiente transcripci√≥n de un audio/video de X (Twitter) y genera una descripci√≥n concisa y √∫til.

TRANSCRIPCI√ìN:
"""
${transcription}
"""

INSTRUCCIONES:
1. Identifica el tema principal y los puntos clave mencionados
2. Describe el tipo de contenido (entrevista, opini√≥n, noticia, explicaci√≥n, etc.)
3. Menciona si hay datos importantes, nombres relevantes o informaci√≥n espec√≠fica
4. Mant√©n un tono profesional y objetivo
5. M√°ximo 150 caracteres para que sea √∫til como descripci√≥n

FORMATO DE RESPUESTA:
Solo devuelve la descripci√≥n en texto plano, sin JSON ni formateo adicional.

Ejemplos de buenas descripciones:
- "Entrevista sobre pol√≠ticas p√∫blicas con datos estad√≠sticos y propuestas espec√≠ficas"
- "Explicaci√≥n detallada del proceso electoral guatemalteco con ejemplos pr√°cticos"
- "An√°lisis pol√≠tico sobre declaraciones presidenciales con contexto hist√≥rico"

Genera una descripci√≥n similar basada en la transcripci√≥n proporcionada.`;
    } else {
      // Prompt original para analizar URL directamente
      prompt = `Analiza el siguiente enlace de X (Twitter) y genera una descripci√≥n concisa y √∫til basada en su contenido.

URL: ${url}

INSTRUCCIONES:
1. Si es un tweet, describe el tema principal, contexto y relevancia
2. Si contiene multimedia (im√°genes, videos), menci√≥nalo brevemente
3. Identifica el tipo de contenido (opini√≥n, noticia, informaci√≥n, etc.)
4. Mant√©n un tono profesional y objetivo
5. M√°ximo 150 caracteres para que sea √∫til como descripci√≥n

FORMATO DE RESPUESTA:
Solo devuelve la descripci√≥n en texto plano, sin JSON ni formateo adicional.

Ejemplos de buenas descripciones:
- "Hilo informativo sobre pol√≠ticas p√∫blicas en Guatemala con datos estad√≠sticos"
- "Video explicativo sobre proceso electoral, incluye infograf√≠as"
- "Opini√≥n de analista pol√≠tico sobre recientes declaraciones presidenciales"

Genera una descripci√≥n similar para el enlace proporcionado.`;
    }

    console.log('üéØ Enviando solicitud a Gemini...');

    // Llamar a Gemini
    const result = await model.generateContent(prompt);
    const description = result.response.text().trim();

    console.log(`‚úÖ Descripci√≥n generada: "${description.substring(0, 50)}..."`);

    return res.json({
      success: true,
      description: description,
      url: url || 'N/A',
      type: type,
      source: transcription ? 'transcription' : 'url',
      metadata: {
        model: 'gemini-2.5-flash',
        timestamp: new Date().toISOString(),
        user_id: user.id,
        character_count: description.length,
        transcription_length: transcription ? transcription.length : 0
      }
    });

  } catch (error) {
    console.error('‚ùå Error generando descripci√≥n:', error);
    
    return res.status(500).json({
      error: 'Error al generar descripci√≥n',
      message: error.message,
      url: req.body.url
    });
  }
});

/**
 * GET /api/ai/test
 * Endpoint de prueba para verificar configuraci√≥n
 */
router.get('/test', verifyUserAccess, async (req, res) => {
  try {
    if (!process.env.GEMINI_API_KEY) {
      return res.status(500).json({ 
        error: 'Gemini API key no configurada',
        configured: false
      });
    }

    return res.json({
      success: true,
      message: 'Servicio de IA configurado correctamente',
      configured: true,
      model: 'gemini-2.5-flash',
      endpoints: [
        'POST /api/ai/generate-description - Generar descripci√≥n de contenido'
      ]
    });

  } catch (error) {
    console.error('‚ùå Error en test de IA:', error);
    return res.status(500).json({
      error: 'Error en servicio de IA',
      message: error.message
    });
  }
});

module.exports = router; 