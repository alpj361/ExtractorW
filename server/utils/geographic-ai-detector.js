// ===================================================================
// DETECTOR GEOGR√ÅFICO CON IA
// Usa Gemini AI para detectar departamentos y pa√≠ses autom√°ticamente
// Con fallback al mapeo manual para mayor confiabilidad
// ===================================================================

const { GoogleGenerativeAI } = require('@google/generative-ai');
const { normalizeGeographicInfo: manualNormalize } = require('./guatemala-geography');

// Instanciar Gemini
const genai = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// Cache para evitar consultas repetidas
const geoCache = new Map();
const CACHE_EXPIRY = 24 * 60 * 60 * 1000; // 24 horas

/**
 * Detecta informaci√≥n geogr√°fica usando Gemini AI
 * @param {string} cityName - Nombre de la ciudad
 * @param {string} countryHint - Sugerencia del pa√≠s (opcional)
 * @returns {Promise<Object>} - {city, department, country, confidence, source}
 */
async function detectGeographyWithAI(cityName, countryHint = 'Guatemala') {
  if (!cityName || !process.env.GEMINI_API_KEY) {
    return null;
  }

  const cacheKey = `${cityName.toLowerCase()}_${countryHint.toLowerCase()}`;
  
  // Verificar cache
  if (geoCache.has(cacheKey)) {
    const cached = geoCache.get(cacheKey);
    if (Date.now() - cached.timestamp < CACHE_EXPIRY) {
      console.log(`üîÑ Usando cach√© para ${cityName}`);
      return cached.data;
    }
  }

  try {
    const prompt = `Eres un experto en geograf√≠a de Guatemala. Analiza el siguiente nombre de ciudad y proporciona informaci√≥n geogr√°fica precisa.

CIUDAD A ANALIZAR: "${cityName}"
PA√çS SUGERIDO: ${countryHint}

INSTRUCCIONES:
1. Identifica el departamento exacto al que pertenece esta ciudad en Guatemala
2. Si no es una ciudad guatemalteca, indica el pa√≠s correcto
3. Usa nombres oficiales exactos de departamentos guatemaltecos
4. Si no est√°s seguro, indica la confianza como "low"

DEPARTAMENTOS V√ÅLIDOS DE GUATEMALA:
Alta Verapaz, Baja Verapaz, Chimaltenango, Chiquimula, El Progreso, Escuintla, Guatemala, Huehuetenango, Izabal, Jalapa, Jutiapa, Pet√©n, Quetzaltenango, Quich√©, Retalhuleu, Sacatep√©quez, San Marcos, Santa Rosa, Solol√°, Suchitep√©quez, Totonicap√°n, Zacapa

FORMATO DE RESPUESTA (SOLO JSON):
{
  "city": "Nombre normalizado de la ciudad",
  "department": "Departamento exacto o null",
  "country": "Pa√≠s (Guatemala u otro)",
  "confidence": "high|medium|low",
  "reasoning": "Breve explicaci√≥n de por qu√© pertenece a ese departamento"
}

Responde √öNICAMENTE el JSON, sin markdown ni explicaciones adicionales.`;

    const model = genai.getGenerativeModel({ model: 'gemini-2.5-flash' });
    const result = await model.generateContent(prompt);
    let responseText = result.response.text().trim();

    // Limpiar respuesta
    responseText = responseText.replace(/```json|```/g, '').trim();

    const aiResult = JSON.parse(responseText);
    
    // Validar respuesta
    if (!aiResult.city && !aiResult.department && !aiResult.country) {
      throw new Error('Respuesta de IA inv√°lida');
    }

    // Normalizar nombres
    const normalizedResult = {
      city: aiResult.city?.trim() || cityName,
      department: aiResult.department?.trim() || null,
      country: aiResult.country?.trim() || null,
      confidence: aiResult.confidence || 'medium',
      reasoning: aiResult.reasoning || 'Detectado por IA',
      source: 'gemini_ai',
      timestamp: Date.now()
    };

    // Guardar en cache
    geoCache.set(cacheKey, {
      data: normalizedResult,
      timestamp: Date.now()
    });

    console.log(`ü§ñ Gemini detect√≥: ${cityName} ‚Üí ${normalizedResult.department || 'No detectado'} (${normalizedResult.confidence})`);
    
    return normalizedResult;

  } catch (error) {
    console.error(`‚ùå Error en detecci√≥n con IA para ${cityName}:`, error.message);
    return null;
  }
}

/**
 * Normaliza informaci√≥n geogr√°fica usando IA como fuente principal
 * Con fallback al sistema manual para mayor confiabilidad
 * @param {Object} geoInfo - {city, department, pais}
 * @returns {Promise<Object>} - Informaci√≥n normalizada y enriquecida
 */
async function normalizeGeographicInfoWithAI(geoInfo) {
  let { city, department, pais } = geoInfo;
  let detectionMethod = 'original';
  let confidence = 'high';
  let reasoning = 'Informaci√≥n original proporcionada';

  try {
    // Si tenemos ciudad pero no departamento, intentar detectar con IA
    if (city && !department) {
      console.log(`üîç Detectando departamento para: ${city}`);
      
      const aiResult = await detectGeographyWithAI(city, pais || 'Guatemala');
      
      if (aiResult && aiResult.department && aiResult.confidence !== 'low') {
        department = aiResult.department;
        pais = aiResult.country || pais;
        detectionMethod = 'gemini_ai';
        confidence = aiResult.confidence;
        reasoning = aiResult.reasoning;
        
        console.log(`‚úÖ IA detect√≥: ${city} ‚Üí ${department} (${confidence})`);
      } else {
        // Fallback al sistema manual
        console.log(`üîÑ Fallback a detecci√≥n manual para: ${city}`);
        const manualResult = manualNormalize(geoInfo);
        
        if (manualResult.department && !geoInfo.department) {
          department = manualResult.department;
          pais = manualResult.pais || pais;
          detectionMethod = 'manual_fallback';
          confidence = 'medium';
          reasoning = 'Detectado por mapeo manual como fallback';
          
          console.log(`üìã Manual detect√≥: ${city} ‚Üí ${department}`);
        }
      }
    }

    // Si no hay pa√≠s especificado pero hay departamento guatemalteco, asumir Guatemala
    if (department && !pais) {
      const guatemalanDepartments = [
        'Alta Verapaz', 'Baja Verapaz', 'Chimaltenango', 'Chiquimula', 'El Progreso', 
        'Escuintla', 'Guatemala', 'Huehuetenango', 'Izabal', 'Jalapa', 'Jutiapa', 
        'Pet√©n', 'Quetzaltenango', 'Quich√©', 'Retalhuleu', 'Sacatep√©quez', 'San Marcos', 
        'Santa Rosa', 'Solol√°', 'Suchitep√©quez', 'Totonicap√°n', 'Zacapa'
      ];
      
      if (guatemalanDepartments.includes(department)) {
        pais = 'Guatemala';
      }
    }

  } catch (error) {
    console.error(`‚ùå Error en normalizaci√≥n con IA:`, error.message);
    
    // En caso de error, usar sistema manual como respaldo completo
    const manualResult = manualNormalize(geoInfo);
    return {
      ...manualResult,
      detection_method: 'manual_error_fallback',
      confidence: 'medium',
      reasoning: 'Usado sistema manual debido a error en IA'
    };
  }

  return {
    city: city?.trim() || null,
    department: department?.trim() || null,
    pais: pais?.trim() || null,
    detection_method: detectionMethod,
    confidence,
    reasoning
  };
}

/**
 * Detecta informaci√≥n geogr√°fica en lote para m√∫ltiples ubicaciones
 * Optimizado para procesar varios elementos de una vez
 * @param {Array} locations - Array de {city, department, pais}
 * @returns {Promise<Array>} - Array de resultados normalizados
 */
async function batchNormalizeGeography(locations) {
  if (!Array.isArray(locations) || locations.length === 0) {
    return [];
  }

  console.log(`üîÑ Procesando ${locations.length} ubicaciones en lote...`);
  
  const results = [];
  const BATCH_SIZE = 5; // Procesar de 5 en 5 para no sobrecargar la API
  
  for (let i = 0; i < locations.length; i += BATCH_SIZE) {
    const batch = locations.slice(i, i + BATCH_SIZE);
    
    const batchPromises = batch.map(async (location, index) => {
      try {
        const result = await normalizeGeographicInfoWithAI(location);
        return { ...result, original_index: i + index };
      } catch (error) {
        console.error(`Error procesando ubicaci√≥n ${i + index}:`, error.message);
        return { 
          ...location, 
          detection_method: 'error',
          confidence: 'low',
          reasoning: 'Error en procesamiento',
          original_index: i + index 
        };
      }
    });
    
    const batchResults = await Promise.all(batchPromises);
    results.push(...batchResults);
    
    // Peque√±a pausa entre lotes para no sobrecargar la API
    if (i + BATCH_SIZE < locations.length) {
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }
  
  console.log(`‚úÖ Procesamiento en lote completado: ${results.length} ubicaciones`);
  return results.sort((a, b) => a.original_index - b.original_index);
}

/**
 * Limpia el cache de detecciones geogr√°ficas
 */
function clearGeographyCache() {
  geoCache.clear();
  console.log('üßπ Cache de geograf√≠a limpiado');
}

/**
 * Obtiene estad√≠sticas del cache
 */
function getCacheStats() {
  const now = Date.now();
  let validEntries = 0;
  let expiredEntries = 0;
  
  for (const [key, entry] of geoCache.entries()) {
    if (now - entry.timestamp < CACHE_EXPIRY) {
      validEntries++;
    } else {
      expiredEntries++;
    }
  }
  
  return {
    total_entries: geoCache.size,
    valid_entries: validEntries,
    expired_entries: expiredEntries,
    cache_expiry_hours: CACHE_EXPIRY / (60 * 60 * 1000)
  };
}

module.exports = {
  detectGeographyWithAI,
  normalizeGeographicInfoWithAI,
  batchNormalizeGeography,
  clearGeographyCache,
  getCacheStats
}; 