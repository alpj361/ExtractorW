const { obtenerContextoTweets, getAboutFromPerplexityIndividual } = require('./server/services/perplexity');

async function testContextoTweets() {
  console.log('üß™ PRUEBA: Contexto de Tweets');
  console.log('='.repeat(50));
  
  // T√©rminos de prueba
  const terminos = [
    'Guatemala',
    'Messi', 
    'f√∫tbol',
    'pol√≠tica'
  ];
  
  for (const termino of terminos) {
    console.log(`\nüîç Probando: "${termino}"`);
    console.log('-'.repeat(30));
    
    try {
      const contexto = await obtenerContextoTweets(termino, 3);
      
      if (contexto) {
        console.log('‚úÖ Contexto obtenido:');
        console.log(contexto);
      } else {
        console.log('üì≠ No se encontr√≥ contexto para este t√©rmino');
      }
      
      // Pausa entre pruebas
      await new Promise(resolve => setTimeout(resolve, 1000));
      
    } catch (error) {
      console.error(`‚ùå Error: ${error.message}`);
    }
  }
}

async function testPerplexityConContexto() {
  console.log('\n\nüß™ PRUEBA: Perplexity con Contexto de Tweets');
  console.log('='.repeat(50));
  
  const termino = 'Guatemala'; // T√©rmino que probablemente tenga tweets
  
  try {
    console.log(`üîç Analizando "${termino}" con Perplexity...`);
    
    const resultado = await getAboutFromPerplexityIndividual(termino, 'Guatemala', 2025);
    
    console.log('‚úÖ Resultado de Perplexity:');
    console.log(JSON.stringify(resultado, null, 2));
    
  } catch (error) {
    console.error(`‚ùå Error: ${error.message}`);
  }
}

async function main() {
  try {
    await testContextoTweets();
    await testPerplexityConContexto();
  } catch (error) {
    console.error('‚ùå Error general:', error);
  }
}

main(); 