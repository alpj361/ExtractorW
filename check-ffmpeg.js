#!/usr/bin/env node

/**
 * Script para verificar que FFmpeg est√© instalado y funcionando correctamente
 */

const { exec } = require('child_process');
const ffmpeg = require('fluent-ffmpeg');

console.log('üé¨ VERIFICACI√ìN DE FFMPEG PARA TRANSCRIPCI√ìN');
console.log('='.repeat(50));

async function checkFFmpegInstallation() {
  try {
    console.log('\n1Ô∏è‚É£ Verificando instalaci√≥n de FFmpeg...');
    
    return new Promise((resolve, reject) => {
      exec('ffmpeg -version', (error, stdout, stderr) => {
        if (error) {
          console.log('‚ùå FFmpeg no est√° instalado o no est√° en PATH');
          console.log(`   Error: ${error.message}`);
          reject(error);
          return;
        }
        
        console.log('‚úÖ FFmpeg est√° instalado');
        const versionLine = stdout.split('\n')[0];
        console.log(`   Versi√≥n: ${versionLine}`);
        resolve(true);
      });
    });
  } catch (error) {
    console.error('‚ùå Error verificando FFmpeg:', error.message);
    throw error;
  }
}

async function checkFluentFFmpeg() {
  try {
    console.log('\n2Ô∏è‚É£ Verificando fluent-ffmpeg...');
    
    return new Promise((resolve, reject) => {
      ffmpeg.getAvailableFormats((err, formats) => {
        if (err) {
          console.log('‚ùå Error con fluent-ffmpeg:', err.message);
          reject(err);
          return;
        }
        
        console.log('‚úÖ fluent-ffmpeg est√° funcionando');
        
        // Verificar formatos importantes
        const importantFormats = ['mp4', 'avi', 'mov', 'mkv', 'wav', 'mp3'];
        const supportedFormats = Object.keys(formats);
        
        console.log('   Formatos soportados para transcripci√≥n:');
        importantFormats.forEach(format => {
          const isSupported = supportedFormats.includes(format);
          console.log(`   ${isSupported ? '‚úÖ' : '‚ùå'} ${format.toUpperCase()}`);
        });
        
        resolve(true);
      });
    });
  } catch (error) {
    console.error('‚ùå Error verificando fluent-ffmpeg:', error.message);
    throw error;
  }
}

async function testAudioExtraction() {
  try {
    console.log('\n3Ô∏è‚É£ Probando extracci√≥n de audio (simulada)...');
    
    // Crear comando de prueba sin archivo real
    const testCommand = ffmpeg()
      .input('/dev/null')  // Entrada nula para prueba
      .audioCodec('libmp3lame')
      .toFormat('mp3');
    
    console.log('‚úÖ Comando de extracci√≥n configurado correctamente');
    console.log('   Codec de audio: libmp3lame');
    console.log('   Formato de salida: MP3');
    
    return true;
  } catch (error) {
    console.error('‚ùå Error configurando extracci√≥n:', error.message);
    throw error;
  }
}

async function checkDirectories() {
  try {
    console.log('\n4Ô∏è‚É£ Verificando directorios de trabajo...');
    
    const fs = require('fs');
    const path = require('path');
    
    const directories = [
      '/tmp/codex-transcriptions',
      '/tmp/audio_transcriptions'
    ];
    
    directories.forEach(dir => {
      try {
        if (!fs.existsSync(dir)) {
          fs.mkdirSync(dir, { recursive: true });
          console.log(`‚úÖ Directorio creado: ${dir}`);
        } else {
          console.log(`‚úÖ Directorio existe: ${dir}`);
        }
        
        // Verificar permisos de escritura
        const testFile = path.join(dir, 'test.txt');
        fs.writeFileSync(testFile, 'test');
        fs.unlinkSync(testFile);
        console.log(`   üìù Permisos de escritura: OK`);
        
      } catch (error) {
        console.log(`‚ùå Error con directorio ${dir}: ${error.message}`);
      }
    });
    
    return true;
  } catch (error) {
    console.error('‚ùå Error verificando directorios:', error.message);
    throw error;
  }
}

async function runAllChecks() {
  try {
    await checkFFmpegInstallation();
    await checkFluentFFmpeg();
    await testAudioExtraction();
    await checkDirectories();
    
    console.log('\nüéâ VERIFICACI√ìN COMPLETA');
    console.log('‚úÖ Todos los componentes est√°n funcionando correctamente');
    console.log('üé¨ El sistema de transcripci√≥n est√° listo para usar');
    
  } catch (error) {
    console.log('\nüí• VERIFICACI√ìN FALLIDA');
    console.log('‚ùå Hay problemas con la configuraci√≥n');
    console.log('\nüìã SOLUCIONES RECOMENDADAS:');
    console.log('1. En Docker: Reconstruir imagen con: docker-compose build');
    console.log('2. En VPS: Instalar FFmpeg con: apt-get install ffmpeg');
    console.log('3. En macOS: Instalar con: brew install ffmpeg');
    console.log('4. Verificar que fluent-ffmpeg est√© en package.json');
    
    process.exit(1);
  }
}

// Ejecutar verificaci√≥n
runAllChecks().catch(console.error); 